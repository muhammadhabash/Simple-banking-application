
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  00002388  0000241c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008002ec  008002ec  000026a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a6e  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001291  00000000  00000000  0000760a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c4f  00000000  00000000  0000889b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad8  00000000  00000000  0000b4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015e2  00000000  00000000  0000bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000343d  00000000  00000000  0000d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  000109e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_15>
      40:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x49>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	12 e0       	ldi	r17, 0x02	; 2
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e8 e8       	ldi	r30, 0x88	; 136
      ea:	f3 e2       	ldi	r31, 0x23	; 35
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ac 3e       	cpi	r26, 0xEC	; 236
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	22 e0       	ldi	r18, 0x02	; 2
      fa:	ac ee       	ldi	r26, 0xEC	; 236
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ac 3f       	cpi	r26, 0xFC	; 252
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
     10c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:

#define FALSE   				 (0)
#define TRUE	   				 (1)

int main(void )
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	cc 55       	subi	r28, 0x5C	; 92
     11e:	d1 09       	sbc	r29, r1
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_adminChoice		 = u8_INTIAL_VAL ;
	uint8_t u8_digitsCount           = u8_INTIAL_VAL;
	uint8_t u8_panValidity           = ATM_FALSE ;
	uint8_t u8_pinValidity           = ATM_FALSE;
	uint16_t u16_recordNum             = u8_INTIAL_VAL;
	uint16_t u16_searchingPanRecordnum = u8_INTIAL_VAL ;
     12a:	1a 82       	std	Y+2, r1	; 0x02
     12c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pu8_tempRecBal[u8_BALANCE_MAX_SIZE];
	uint8_t pu8_maxBalance[u8_MAX_BALANCE_MAX_SIZE];

	ATM_modes mode = ADMIN;
	
	ATM_Init() ;
     12e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <ATM_Init>
	ATM_voidStoreRecNum(u16_recordNum);
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ATM_voidStoreRecNum>
	EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, u8_MAX_BALANCE, u8_MAX_BALANCE_MAX_SIZE);
     13a:	27 e0       	ldi	r18, 0x07	; 7
     13c:	4b e6       	ldi	r20, 0x6B	; 107
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	69 e1       	ldi	r22, 0x19	; 25
     142:	8e ef       	ldi	r24, 0xFE	; 254
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EEPROM_u8WriteNeededPartBlock>
	uint8_t pu8_newRecPan[u8_PAN_MAX_SIZE];
	uint8_t pu8_newRecBal[u8_BALANCE_MAX_SIZE];
	uint8_t pu8_tempRecBal[u8_BALANCE_MAX_SIZE];
	uint8_t pu8_maxBalance[u8_MAX_BALANCE_MAX_SIZE];

	ATM_modes mode = ADMIN;
     14a:	01 e0       	ldi	r16, 0x01	; 1
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
	uint8_t u8_recExist          = FALSE;
	uint8_t u8_noChoice          = FALSE;
     14c:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
	uint8_t u8_recExist          = FALSE;
     14e:	b1 2c       	mov	r11, r1
int main(void )
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
	uint8_t u8_flag              = TRUE;
     150:	ff 24       	eor	r15, r15
     152:	f3 94       	inc	r15

int main(void )
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
	uint8_t u8_noExit            = TRUE;
     154:	ee 24       	eor	r14, r14
     156:	e3 94       	inc	r14
#define TRUE	   				 (1)

int main(void )
{
	uint8_t u8_maxBalValid       = u8_BALANCE_NOT_VALID ;
	uint8_t u8_firstLogin        = TRUE;
     158:	dd 24       	eor	r13, r13
     15a:	d3 94       	inc	r13
     15c:	06 c0       	rjmp	.+12     	; 0x16a <main+0x56>
							u8_flag = TRUE;	
						}
						else if (u8_keyPadReturnASCII == '3') 
						{
								u8_noExit = FALSE;
								u8_flag = TRUE;
     15e:	ff 24       	eor	r15, r15
     160:	f3 94       	inc	r15
							u8_noExit = TRUE;
							u8_flag = TRUE;	
						}
						else if (u8_keyPadReturnASCII == '3') 
						{
								u8_noExit = FALSE;
     162:	e1 2c       	mov	r14, r1
     164:	02 c0       	rjmp	.+4      	; 0x16a <main+0x56>
						
							}while(u8_noExit);
						break;
					
			case ADMIN:
			            u8_noChoice   = TRUE;
     166:	11 e0       	ldi	r17, 0x01	; 1
						u8_firstLogin = FALSE;
     168:	d1 2c       	mov	r13, r1
	ATM_Init() ;
	ATM_voidStoreRecNum(u16_recordNum);
	EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, u8_MAX_BALANCE, u8_MAX_BALANCE_MAX_SIZE);
	while (1)
	{
		if(u8_firstLogin)
     16a:	dd 20       	and	r13, r13
     16c:	49 f0       	breq	.+18     	; 0x180 <main+0x6c>
		{
			u16_recordNum = ATM_u16GetRecNum();
     16e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <ATM_u16GetRecNum>
			if(u16_recordNum == u8_EMPTY)
     172:	89 2b       	or	r24, r25
     174:	89 f5       	brne	.+98     	; 0x1d8 <main+0xc4>
			{
				TERMINAL_display(PROG_FIRST_STATE_STR);
     176:	82 e7       	ldi	r24, 0x72	; 114
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
     17e:	2c c0       	rjmp	.+88     	; 0x1d8 <main+0xc4>
			}
		}
		else
		{
		   TERMINAL_display(ADMIN_MODE_STR);
     180:	8e e9       	ldi	r24, 0x9E	; 158
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
		   TERMINAL_display(USER_MODE_STR);
     188:	83 ec       	ldi	r24, 0xC3	; 195
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
     190:	23 c0       	rjmp	.+70     	; 0x1d8 <main+0xc4>
		}
		
		while (u8_noChoice)
		{
			TERMINAL_display(CHOICE_STR);
     192:	81 ee       	ldi	r24, 0xE1	; 225
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
			TERMINAL_command(pu8_atmDataBuffer,10);
     19a:	6a e0       	ldi	r22, 0x0A	; 10
     19c:	ce 01       	movw	r24, r28
     19e:	89 96       	adiw	r24, 0x29	; 41
     1a0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TERMINAL_command>
			
			if(strcmp(pu8_atmDataBuffer,ADMIN_STR) == u8_EQUAL_STR)
     1a4:	6a ee       	ldi	r22, 0xEA	; 234
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	ce 01       	movw	r24, r28
     1aa:	89 96       	adiw	r24, 0x29	; 41
     1ac:	0e 94 b9 11 	call	0x2372	; 0x2372 <strcmp>
     1b0:	89 2b       	or	r24, r25
     1b2:	69 f0       	breq	.+26     	; 0x1ce <main+0xba>
			{
				mode = ADMIN;
				u8_noChoice = FALSE;
			}
			else if(strcmp(pu8_atmDataBuffer,USER_STR) == u8_EQUAL_STR)
     1b4:	60 ef       	ldi	r22, 0xF0	; 240
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	ce 01       	movw	r24, r28
     1ba:	89 96       	adiw	r24, 0x29	; 41
     1bc:	0e 94 b9 11 	call	0x2372	; 0x2372 <strcmp>
     1c0:	89 2b       	or	r24, r25
     1c2:	41 f0       	breq	.+16     	; 0x1d4 <main+0xc0>
				mode = USER;
				u8_noChoice = FALSE;
			}
			else
			{
				TERMINAL_display(WRONG_CHOICE_STR);
     1c4:	85 ef       	ldi	r24, 0xF5	; 245
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <main+0xc4>
			TERMINAL_display(CHOICE_STR);
			TERMINAL_command(pu8_atmDataBuffer,10);
			
			if(strcmp(pu8_atmDataBuffer,ADMIN_STR) == u8_EQUAL_STR)
			{
				mode = ADMIN;
     1ce:	01 e0       	ldi	r16, 0x01	; 1
				u8_noChoice = FALSE;
     1d0:	10 e0       	ldi	r17, 0x00	; 0
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <main+0xc4>
			}
			else if(strcmp(pu8_atmDataBuffer,USER_STR) == u8_EQUAL_STR)
			{
				mode = USER;
     1d4:	00 e0       	ldi	r16, 0x00	; 0
				u8_noChoice = FALSE;
     1d6:	10 e0       	ldi	r17, 0x00	; 0
		{
		   TERMINAL_display(ADMIN_MODE_STR);
		   TERMINAL_display(USER_MODE_STR);
		}
		
		while (u8_noChoice)
     1d8:	11 11       	cpse	r17, r1
     1da:	db cf       	rjmp	.-74     	; 0x192 <main+0x7e>
			{
				TERMINAL_display(WRONG_CHOICE_STR);
			}
		}
		
		switch(mode)
     1dc:	00 23       	and	r16, r16
     1de:	21 f0       	breq	.+8      	; 0x1e8 <main+0xd4>
     1e0:	01 30       	cpi	r16, 0x01	; 1
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <main+0xd2>
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <main+0x236>
     1e6:	c1 cf       	rjmp	.-126    	; 0x16a <main+0x56>
		{
			case USER:
			
			do{              
				        if(u8_flag == TRUE)
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	f8 12       	cpse	r15, r24
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0xde>
						{
							ATM_voidlcdUserInterface();
     1ee:	0e 94 96 0b 	call	0x172c	; 0x172c <ATM_voidlcdUserInterface>
						}
						u8_flag = FALSE;
						u8_keyPadReturnASCII = KeyPad_U8Data();			
     1f2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <KeyPad_U8Data>
						if(u8_keyPadReturnASCII == '1')
     1f6:	81 33       	cpi	r24, 0x31	; 49
     1f8:	39 f0       	breq	.+14     	; 0x208 <main+0xf4>
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;
						}
						else if (u8_keyPadReturnASCII == '2')
     1fa:	82 33       	cpi	r24, 0x32	; 50
     1fc:	51 f0       	breq	.+20     	; 0x212 <main+0xfe>
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;	
						}
						else if (u8_keyPadReturnASCII == '3') 
     1fe:	83 33       	cpi	r24, 0x33	; 51
     200:	09 f4       	brne	.+2      	; 0x204 <main+0xf0>
     202:	ad cf       	rjmp	.-166    	; 0x15e <main+0x4a>
			do{              
				        if(u8_flag == TRUE)
						{
							ATM_voidlcdUserInterface();
						}
						u8_flag = FALSE;
     204:	f1 2c       	mov	r15, r1
     206:	09 c0       	rjmp	.+18     	; 0x21a <main+0x106>
						u8_keyPadReturnASCII = KeyPad_U8Data();			
						if(u8_keyPadReturnASCII == '1')
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;
     208:	ff 24       	eor	r15, r15
     20a:	f3 94       	inc	r15
						}
						u8_flag = FALSE;
						u8_keyPadReturnASCII = KeyPad_U8Data();			
						if(u8_keyPadReturnASCII == '1')
						{
							u8_noExit = TRUE;
     20c:	ee 24       	eor	r14, r14
     20e:	e3 94       	inc	r14
     210:	04 c0       	rjmp	.+8      	; 0x21a <main+0x106>
							u8_flag = TRUE;
						}
						else if (u8_keyPadReturnASCII == '2')
						{
							u8_noExit = TRUE;
							u8_flag = TRUE;	
     212:	ff 24       	eor	r15, r15
     214:	f3 94       	inc	r15
							u8_noExit = TRUE;
							u8_flag = TRUE;
						}
						else if (u8_keyPadReturnASCII == '2')
						{
							u8_noExit = TRUE;
     216:	ee 24       	eor	r14, r14
     218:	e3 94       	inc	r14
								u8_noExit = FALSE;
								u8_flag = TRUE;
								break;
						}
						
						if(u8_keyPadReturnASCII == '1')
     21a:	81 33       	cpi	r24, 0x31	; 49
     21c:	09 f0       	breq	.+2      	; 0x220 <main+0x10c>
     21e:	8e c0       	rjmp	.+284    	; 0x33c <main+0x228>
						{
							LCD_command(DISPLAY_CLEAR);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
							LCD_printString(LCD_ENTER_CARD_STR);
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				
							do{
								u8_keyPadReturnASCII = KeyPad_U8Data();
     22e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <KeyPad_U8Data>

							  }while(u8_keyPadReturnASCII != u8_CARD_PRESSED);
     232:	83 32       	cpi	r24, 0x23	; 35
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x11a>
				
							LCD_command(DISPLAY_CLEAR);
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
							LCD_printString(PROCESS_WAIT_STR);
     23c:	81 e1       	ldi	r24, 0x11	; 17
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
							Ru8_PORTD |= 0x80;
     244:	82 b3       	in	r24, 0x12	; 18
     246:	80 68       	ori	r24, 0x80	; 128
     248:	82 bb       	out	0x12, r24	; 18
							TIMER0_msdelay(1);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
							SPI_slaveReceiveString(pu8_atmPANBuffer,u8_PAN_MAX_SIZE);
     252:	61 e1       	ldi	r22, 0x11	; 17
     254:	ce 01       	movw	r24, r28
     256:	03 96       	adiw	r24, 0x03	; 3
     258:	0e 94 3a 09 	call	0x1274	; 0x1274 <SPI_slaveReceiveString>
							Ru8_PORTD &= ~(0x80);
     25c:	82 b3       	in	r24, 0x12	; 18
     25e:	8f 77       	andi	r24, 0x7F	; 127
     260:	82 bb       	out	0x12, r24	; 18
							TERMINAL_display(pu8_atmPANBuffer);
     262:	ce 01       	movw	r24, r28
     264:	03 96       	adiw	r24, 0x03	; 3
     266:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
							u8_panValidity =ATM_panValidity(pu8_atmPANBuffer,&u16_searchingPanRecordnum) ;
     26a:	be 01       	movw	r22, r28
     26c:	6f 5f       	subi	r22, 0xFF	; 255
     26e:	7f 4f       	sbci	r23, 0xFF	; 255
     270:	ce 01       	movw	r24, r28
     272:	03 96       	adiw	r24, 0x03	; 3
     274:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ATM_panValidity>

							if(u8_panValidity)
     278:	88 23       	and	r24, r24
     27a:	09 f4       	brne	.+2      	; 0x27e <main+0x16a>
     27c:	51 c0       	rjmp	.+162    	; 0x320 <main+0x20c>
							{
								TERMINAL_display("\rHi\r");
     27e:	8e e1       	ldi	r24, 0x1E	; 30
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
								//SPI_tranceiver(u8_PAN_VALID);
								Ru8_PORTD |= 0x80;
     286:	82 b3       	in	r24, 0x12	; 18
     288:	80 68       	ori	r24, 0x80	; 128
     28a:	82 bb       	out	0x12, r24	; 18
								SPI_slaveReceiveString(pu8_atmPINBuffer,u8_PIN_SIZE) ;
     28c:	65 e0       	ldi	r22, 0x05	; 5
     28e:	ce 01       	movw	r24, r28
     290:	44 96       	adiw	r24, 0x14	; 20
     292:	0e 94 3a 09 	call	0x1274	; 0x1274 <SPI_slaveReceiveString>
								Ru8_PORTD &= ~(0x80);
     296:	82 b3       	in	r24, 0x12	; 18
     298:	8f 77       	andi	r24, 0x7F	; 127
     29a:	82 bb       	out	0x12, r24	; 18
								LCD_command(DISPLAY_CLEAR) ;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
								LCD_printString(LCD_REQUIRE_PIN_STR);
     2a2:	83 e2       	ldi	r24, 0x23	; 35
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
								LCD_newLine();
     2aa:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
								u8_pinValidity = ATM_u8PinAccessGrant(pu8_atmPINBuffer) ;
     2ae:	ce 01       	movw	r24, r28
     2b0:	44 96       	adiw	r24, 0x14	; 20
     2b2:	0e 94 ac 0b 	call	0x1758	; 0x1758 <ATM_u8PinAccessGrant>

								if(u8_pinValidity)
     2b6:	88 23       	and	r24, r24
     2b8:	29 f1       	breq	.+74     	; 0x304 <main+0x1f0>
								{
									//SPI_tranceiver(u8_PIN_VALID);
									u8_inputBalValid = ATM_u8checkBalanceValidity(pu8_enteredUserBal) ;
     2ba:	ce 01       	movw	r24, r28
     2bc:	49 96       	adiw	r24, 0x19	; 25
     2be:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ATM_u8checkBalanceValidity>

									if(u8_inputBalValid == u8_BALANCE_VALID )
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	51 f4       	brne	.+20     	; 0x2da <main+0x1c6>
									{
										u8_accBalValidty = ATM_u8checkAccounBal(pu8_enteredUserBal,pu8_userAccBal,u16_searchingPanRecordnum) ;
     2c6:	49 81       	ldd	r20, Y+1	; 0x01
     2c8:	5a 81       	ldd	r21, Y+2	; 0x02
     2ca:	be 01       	movw	r22, r28
     2cc:	60 5e       	subi	r22, 0xE0	; 224
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	ce 01       	movw	r24, r28
     2d2:	49 96       	adiw	r24, 0x19	; 25
     2d4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <ATM_u8checkAccounBal>
     2d8:	35 c0       	rjmp	.+106    	; 0x344 <main+0x230>
									}
									else
									{
										//SPI_tranceiver(u8_PIN_INVALID);
										// some entered balance is not in numbers range
										LCD_command(DISPLAY_CLEAR);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
										LCD_printString((uint8_t*)"balance entered");
     2e0:	8d e2       	ldi	r24, 0x2D	; 45
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
										LCD_newLine();
     2e8:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
										LCD_printString((uint8_t*)"incorrect ");
     2ec:	8d e3       	ldi	r24, 0x3D	; 61
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
										TIMER0_msdelay(1000) ;
     2f4:	88 ee       	ldi	r24, 0xE8	; 232
     2f6:	93 e0       	ldi	r25, 0x03	; 3
     2f8:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
										LCD_command(DISPLAY_CLEAR) ;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
     302:	20 c0       	rjmp	.+64     	; 0x344 <main+0x230>
									}
								}
								else
								{
									LCD_command(DISPLAY_CLEAR) ;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
									LCD_printString((uint8_t*)"PIN Entered") ;
     30a:	88 e4       	ldi	r24, 0x48	; 72
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
									LCD_newLine() ;
     312:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
									LCD_printString((uint8_t*)"NOT VALID") ;
     316:	84 e5       	ldi	r24, 0x54	; 84
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
     31e:	12 c0       	rjmp	.+36     	; 0x344 <main+0x230>
								}
							}
							else
							{
								//SPI_tranceiver(u8_PAN_INVALID);
								LCD_command(DISPLAY_CLEAR) ;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
								LCD_printString((uint8_t*)"card not") ;
     326:	8e e5       	ldi	r24, 0x5E	; 94
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
								LCD_newLine() ;
     32e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
								LCD_printString((uint8_t*)"recognized") ;
     332:	87 e6       	ldi	r24, 0x67	; 103
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
     33a:	04 c0       	rjmp	.+8      	; 0x344 <main+0x230>
							}
						}
						else if (u8_keyPadReturnASCII == '2')
     33c:	82 33       	cpi	r24, 0x32	; 50
     33e:	11 f4       	brne	.+4      	; 0x344 <main+0x230>
						{
							ATM_voidShowTemp() ;
     340:	0e 94 9e 0c 	call	0x193c	; 0x193c <ATM_voidShowTemp>
						}
						
							}while(u8_noExit);
     344:	e1 10       	cpse	r14, r1
     346:	50 cf       	rjmp	.-352    	; 0x1e8 <main+0xd4>
     348:	10 cf       	rjmp	.-480    	; 0x16a <main+0x56>
					
			case ADMIN:
			            u8_noChoice   = TRUE;
						u8_firstLogin = FALSE;
						u8_adminMode  = TRUE;
						u8_accessGranted = ACCESS_grant();
     34a:	0e 94 10 0b 	call	0x1620	; 0x1620 <ACCESS_grant>
     34e:	c8 2e       	mov	r12, r24
						break;
					
			case ADMIN:
			            u8_noChoice   = TRUE;
						u8_firstLogin = FALSE;
						u8_adminMode  = TRUE;
     350:	dd 24       	eor	r13, r13
     352:	d3 94       	inc	r13
						u8_accessGranted = ACCESS_grant();
						
						while(u8_adminMode && u8_accessGranted)
     354:	92 c0       	rjmp	.+292    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
						{	
						    TERMINAL_display(NEW_REC_STR);
     356:	82 e7       	ldi	r24, 0x72	; 114
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
						    TERMINAL_display(MAX_BAL_STR);
     35e:	89 e8       	ldi	r24, 0x89	; 137
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
						    TERMINAL_display(EXIT_STR);
     366:	80 ea       	ldi	r24, 0xA0	; 160
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
						    TERMINAL_display(CHOICE_STR);
     36e:	81 ee       	ldi	r24, 0xE1	; 225
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
							
						    u8_adminChoice = USART_u8Receive();
     376:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_u8Receive>
						
						    if(u8_adminChoice == NEW_REC)
     37a:	81 33       	cpi	r24, 0x31	; 49
     37c:	09 f0       	breq	.+2      	; 0x380 <main+0x26c>
     37e:	49 c0       	rjmp	.+146    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
						    {	
								do 
								{
									TERMINAL_display(REQUIRE_PAN_STR);
     380:	8a ea       	ldi	r24, 0xAA	; 170
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
									u8_panValid = TERMINAL_u8getInput(pu8_newRecPan, u8_PAN_MAX_SIZE, u8_PAN_MIN_SIZE);
     388:	49 e0       	ldi	r20, 0x09	; 9
     38a:	61 e1       	ldi	r22, 0x11	; 17
     38c:	ce 01       	movw	r24, r28
     38e:	c3 96       	adiw	r24, 0x33	; 51
     390:	0e 94 43 0b 	call	0x1686	; 0x1686 <TERMINAL_u8getInput>
     394:	18 2f       	mov	r17, r24
									if (!u8_panValid)
     396:	81 11       	cpse	r24, r1
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <main+0x28e>
									{
										TERMINAL_display(WRONG_PAN_STR);
     39a:	87 eb       	ldi	r24, 0xB7	; 183
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
									}
								} while(!u8_panValid);
     3a2:	11 23       	and	r17, r17
     3a4:	69 f3       	breq	.-38     	; 0x380 <main+0x26c>
								
								u16_recordNum = ATM_u16GetRecNum();
     3a6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <ATM_u16GetRecNum>
								EEPROM_u8WriteNeededPartBlock(u16_recordNum, u8_PAN_BYTE_NUM, pu8_newRecPan, u8_PAN_MAX_SIZE);
     3aa:	21 e1       	ldi	r18, 0x11	; 17
     3ac:	ae 01       	movw	r20, r28
     3ae:	4d 5c       	subi	r20, 0xCD	; 205
     3b0:	5f 4f       	sbci	r21, 0xFF	; 255
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EEPROM_u8WriteNeededPartBlock>
						
								do
								{
									TERMINAL_display(ENTER_BAL_STR);
     3b8:	85 ec       	ldi	r24, 0xC5	; 197
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
									u8_balValid = TERMINAL_u8getInput(pu8_tempRecBal,u8_BALANCE_MAX_SIZE, u8_BALANCE_MIN_SIZE);
     3c0:	42 e0       	ldi	r20, 0x02	; 2
     3c2:	69 e0       	ldi	r22, 0x09	; 9
     3c4:	ce 01       	movw	r24, r28
     3c6:	83 5b       	subi	r24, 0xB3	; 179
     3c8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ca:	0e 94 43 0b 	call	0x1686	; 0x1686 <TERMINAL_u8getInput>
     3ce:	18 2f       	mov	r17, r24
									u8_digitsCount = ATM_u8getArrCount(pu8_tempRecBal);
     3d0:	ce 01       	movw	r24, r28
     3d2:	83 5b       	subi	r24, 0xB3	; 179
     3d4:	9f 4f       	sbci	r25, 0xFF	; 255
     3d6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <ATM_u8getArrCount>
								}while (!u8_balValid);
     3da:	11 23       	and	r17, r17
     3dc:	69 f3       	breq	.-38     	; 0x3b8 <main+0x2a4>
								
								ATM_voidstoreBalance(pu8_newRecBal,pu8_tempRecBal,u8_digitsCount) ;
     3de:	48 2f       	mov	r20, r24
     3e0:	be 01       	movw	r22, r28
     3e2:	63 5b       	subi	r22, 0xB3	; 179
     3e4:	7f 4f       	sbci	r23, 0xFF	; 255
     3e6:	ce 01       	movw	r24, r28
     3e8:	8c 5b       	subi	r24, 0xBC	; 188
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <ATM_voidstoreBalance>
								u16_recordNum = ATM_u16GetRecNum();
     3f0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <ATM_u16GetRecNum>
     3f4:	5c 01       	movw	r10, r24
								EEPROM_u8WriteNeededPartBlock(u16_recordNum, u8_BALANCE_BYTE_NUM, pu8_newRecBal, u8_BALANCE_MAX_SIZE);
     3f6:	29 e0       	ldi	r18, 0x09	; 9
     3f8:	ae 01       	movw	r20, r28
     3fa:	4c 5b       	subi	r20, 0xBC	; 188
     3fc:	5f 4f       	sbci	r21, 0xFF	; 255
     3fe:	64 e1       	ldi	r22, 0x14	; 20
     400:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EEPROM_u8WriteNeededPartBlock>
								u16_recordNum++;
								ATM_voidStoreRecNum(u16_recordNum);
     404:	c5 01       	movw	r24, r10
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <ATM_voidStoreRecNum>
								u8_recExist = TRUE;
     40c:	bb 24       	eor	r11, r11
     40e:	b3 94       	inc	r11
     410:	34 c0       	rjmp	.+104    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
								
							}
						    else if(u8_adminChoice == SET_MAX_BAL)
     412:	82 33       	cpi	r24, 0x32	; 50
     414:	f1 f4       	brne	.+60     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
						    {
							    TERMINAL_display(REQUIRE_MAX_BAL_STR);
     416:	86 ed       	ldi	r24, 0xD6	; 214
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>

							    do
							    {
							    	u8_maxBalValid =  TERMINAL_u8getInput(pu8_maxBalance,u8_MAX_BALANCE_MAX_SIZE, u8_MAX_BALANCE_MIN_SIZE);
     41e:	47 e0       	ldi	r20, 0x07	; 7
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	ce 01       	movw	r24, r28
     424:	8a 5a       	subi	r24, 0xAA	; 170
     426:	9f 4f       	sbci	r25, 0xFF	; 255
     428:	0e 94 43 0b 	call	0x1686	; 0x1686 <TERMINAL_u8getInput>
     42c:	18 2f       	mov	r17, r24
							    	if(!u8_maxBalValid)
     42e:	81 11       	cpse	r24, r1
     430:	04 c0       	rjmp	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
							    	{
										TERMINAL_display(WRONG_MAX_BAL_STR);
     432:	8b ee       	ldi	r24, 0xEB	; 235
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
							    	}
							    }while(!u8_maxBalValid);
     43a:	11 23       	and	r17, r17
     43c:	81 f3       	breq	.-32     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>

							    EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, pu8_maxBalance, u8_MAX_BALANCE_MAX_SIZE);
     43e:	27 e0       	ldi	r18, 0x07	; 7
     440:	ae 01       	movw	r20, r28
     442:	4a 5a       	subi	r20, 0xAA	; 170
     444:	5f 4f       	sbci	r21, 0xFF	; 255
     446:	69 e1       	ldi	r22, 0x19	; 25
     448:	8e ef       	ldi	r24, 0xFE	; 254
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EEPROM_u8WriteNeededPartBlock>
     450:	14 c0       	rjmp	.+40     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
     452:	83 33       	cpi	r24, 0x33	; 51
     454:	11 f4       	brne	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	b1 10       	cpse	r11, r1
     458:	0e c0       	rjmp	.+28     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
						    {
								u8_adminMode     = FALSE;
								u8_accessGranted = FALSE;
						    }
							else if (u8_adminChoice == EXIT && u8_recExist == FALSE)
     45a:	83 33       	cpi	r24, 0x33	; 51
     45c:	39 f4       	brne	.+14     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     45e:	b1 10       	cpse	r11, r1
     460:	05 c0       	rjmp	.+10     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
							{
								TERMINAL_display(NO_REC_TO_EXIT_STR);
     462:	8d ef       	ldi	r24, 0xFD	; 253
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
     46a:	07 c0       	rjmp	.+14     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
							}
							else 
							{
								TERMINAL_display(WRONG_CHOICE_STR);
     46c:	85 ef       	ldi	r24, 0xF5	; 245
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
     474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
							    EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, pu8_maxBalance, u8_MAX_BALANCE_MAX_SIZE);
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
						    {
								u8_adminMode     = FALSE;
								u8_accessGranted = FALSE;
     476:	c1 2c       	mov	r12, r1

							    EEPROM_u8WriteNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM, pu8_maxBalance, u8_MAX_BALANCE_MAX_SIZE);
						    }
						    else if(u8_adminChoice == EXIT && u8_recExist)
						    {
								u8_adminMode     = FALSE;
     478:	d1 2c       	mov	r13, r1
			            u8_noChoice   = TRUE;
						u8_firstLogin = FALSE;
						u8_adminMode  = TRUE;
						u8_accessGranted = ACCESS_grant();
						
						while(u8_adminMode && u8_accessGranted)
     47a:	dd 20       	and	r13, r13
     47c:	09 f4       	brne	.+2      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     47e:	73 ce       	rjmp	.-794    	; 0x166 <main+0x52>
     480:	c1 10       	cpse	r12, r1
     482:	69 cf       	rjmp	.-302    	; 0x356 <main+0x242>
						
							}while(u8_noExit);
						break;
					
			case ADMIN:
			            u8_noChoice   = TRUE;
     484:	11 e0       	ldi	r17, 0x01	; 1
						u8_firstLogin = FALSE;
     486:	d1 2c       	mov	r13, r1
     488:	70 ce       	rjmp	.-800    	; 0x16a <main+0x56>

0000048a <BUZZER_en>:
#include "BUZZER_cfg.h"
#include "BUZZER.h"

void BUZZER_en(void)
{
	DIO_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	63 e0       	ldi	r22, 0x03	; 3
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
     494:	08 95       	ret

00000496 <BUZZER_on>:
}

void BUZZER_on(void)
{
	DIO_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     4a0:	08 95       	ret

000004a2 <BUZZER_off>:
}

void BUZZER_off(void)
{
	DIO_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	63 e0       	ldi	r22, 0x03	; 3
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     4ac:	08 95       	ret

000004ae <EEPROM_voidInit>:
#include "EEPROM_interface.h"
#include "EEPROM_private.h"

void EEPROM_voidInit(void) 
{
	I2C_masterInit();
     4ae:	0e 94 b5 08 	call	0x116a	; 0x116a <I2C_masterInit>
     4b2:	08 95       	ret

000004b4 <EEPROM_u8WriteNeededPartBlock>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8WriteNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToWrite,uint8_t u8_ArrSize ) 
{
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
	if((u8_ByteNum+u8_ArrSize)<u8_EEPROM_MAX_BYTE_ADDRESS && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS  && pu8_ArrWantedToWrite!=NULL_POINTER )
     4c0:	e2 2f       	mov	r30, r18
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	e6 0f       	add	r30, r22
     4c6:	f1 1d       	adc	r31, r1
     4c8:	e0 34       	cpi	r30, 0x40	; 64
     4ca:	f1 05       	cpc	r31, r1
     4cc:	84 f5       	brge	.+96     	; 0x52e <EEPROM_u8WriteNeededPartBlock+0x7a>
     4ce:	81 15       	cp	r24, r1
     4d0:	32 e0       	ldi	r19, 0x02	; 2
     4d2:	93 07       	cpc	r25, r19
     4d4:	70 f5       	brcc	.+92     	; 0x532 <EEPROM_u8WriteNeededPartBlock+0x7e>
     4d6:	41 15       	cp	r20, r1
     4d8:	51 05       	cpc	r21, r1
     4da:	69 f1       	breq	.+90     	; 0x536 <EEPROM_u8WriteNeededPartBlock+0x82>
     4dc:	d2 2f       	mov	r29, r18
     4de:	8a 01       	movw	r16, r20
     4e0:	c6 2f       	mov	r28, r22
     4e2:	7c 01       	movw	r14, r24
	{
		I2C_masterStart();
     4e4:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_masterStart>
		I2C_masterWriteToAddress(u8_EEPROM_DEVICE_ADD); 
     4e8:	80 e5       	ldi	r24, 0x50	; 80
     4ea:	0e 94 ce 08 	call	0x119c	; 0x119c <I2C_masterWriteToAddress>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
     4ee:	c7 01       	movw	r24, r14
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
     4f4:	96 95       	lsr	r25
     4f6:	87 95       	ror	r24
		I2C_masterWriteData(u8_PageAdd) ;
     4f8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
     4fc:	8e 2d       	mov	r24, r14
     4fe:	82 95       	swap	r24
     500:	88 0f       	add	r24, r24
     502:	88 0f       	add	r24, r24
     504:	80 7c       	andi	r24, 0xC0	; 192
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
     506:	8c 2b       	or	r24, r28
     508:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		for(u8_ArrIndex=u8_EEPROM_INTIAL_VAL;u8_ArrIndex<u8_ArrSize;u8_ArrIndex++)
     50c:	c0 e0       	ldi	r28, 0x00	; 0
     50e:	09 c0       	rjmp	.+18     	; 0x522 <EEPROM_u8WriteNeededPartBlock+0x6e>
		{
			if(pu8_ArrWantedToWrite[u8_ArrIndex] != NULL_CHAR )
     510:	f8 01       	movw	r30, r16
     512:	ec 0f       	add	r30, r28
     514:	f1 1d       	adc	r31, r1
     516:	80 81       	ld	r24, Z
     518:	88 23       	and	r24, r24
     51a:	29 f0       	breq	.+10     	; 0x526 <EEPROM_u8WriteNeededPartBlock+0x72>
			{
				I2C_masterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));	
     51c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
		I2C_masterWriteData(u8_PageAdd) ;
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
		for(u8_ArrIndex=u8_EEPROM_INTIAL_VAL;u8_ArrIndex<u8_ArrSize;u8_ArrIndex++)
     520:	cf 5f       	subi	r28, 0xFF	; 255
     522:	cd 17       	cp	r28, r29
     524:	a8 f3       	brcs	.-22     	; 0x510 <EEPROM_u8WriteNeededPartBlock+0x5c>
			{
				I2C_masterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));	
			}
			else break;
		}
		I2C_masterStop();
     526:	0e 94 1d 09 	call	0x123a	; 0x123a <I2C_masterStop>

uint8_t EEPROM_u8WriteNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToWrite,uint8_t u8_ArrSize ) 
{
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
     52a:	87 e9       	ldi	r24, 0x97	; 151
			{
				I2C_masterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));	
			}
			else break;
		}
		I2C_masterStop();
     52c:	05 c0       	rjmp	.+10     	; 0x538 <EEPROM_u8WriteNeededPartBlock+0x84>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
     52e:	86 e9       	ldi	r24, 0x96	; 150
     530:	03 c0       	rjmp	.+6      	; 0x538 <EEPROM_u8WriteNeededPartBlock+0x84>
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	01 c0       	rjmp	.+2      	; 0x538 <EEPROM_u8WriteNeededPartBlock+0x84>
     536:	86 e9       	ldi	r24, 0x96	; 150
	}
	return u8_ErrorInArg ; 
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <EEPROM_u8WriteWantedByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8WriteWantedByte(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t u8_WantedToWrite)
{
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
	if(u8_ByteNum<u8_EEPROM_MAX_BYTE_ADDRESS && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS  )
     54e:	60 34       	cpi	r22, 0x40	; 64
     550:	10 f5       	brcc	.+68     	; 0x596 <EEPROM_u8WriteWantedByte+0x50>
     552:	81 15       	cp	r24, r1
     554:	22 e0       	ldi	r18, 0x02	; 2
     556:	92 07       	cpc	r25, r18
     558:	00 f5       	brcc	.+64     	; 0x59a <EEPROM_u8WriteWantedByte+0x54>
     55a:	04 2f       	mov	r16, r20
     55c:	16 2f       	mov	r17, r22
     55e:	ec 01       	movw	r28, r24
	{
		I2C_masterStart();
     560:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_masterStart>
		I2C_masterWriteToAddress(u8_EEPROM_DEVICE_ADD); 
     564:	80 e5       	ldi	r24, 0x50	; 80
     566:	0e 94 ce 08 	call	0x119c	; 0x119c <I2C_masterWriteToAddress>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD);
     56a:	ce 01       	movw	r24, r28
     56c:	96 95       	lsr	r25
     56e:	87 95       	ror	r24
     570:	96 95       	lsr	r25
     572:	87 95       	ror	r24
		I2C_masterWriteData(u8_PageAdd);
     574:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
     578:	8c 2f       	mov	r24, r28
     57a:	82 95       	swap	r24
     57c:	88 0f       	add	r24, r24
     57e:	88 0f       	add	r24, r24
     580:	80 7c       	andi	r24, 0xC0	; 192
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum);
     582:	81 2b       	or	r24, r17
     584:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		I2C_masterWriteData(u8_WantedToWrite);
     588:	80 2f       	mov	r24, r16
     58a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		I2C_masterStop();
     58e:	0e 94 1d 09 	call	0x123a	; 0x123a <I2C_masterStop>
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8WriteWantedByte(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t u8_WantedToWrite)
{
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
     592:	87 e9       	ldi	r24, 0x97	; 151
		I2C_masterWriteData(u8_PageAdd);
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum);
		I2C_masterWriteData(u8_WantedToWrite);
		I2C_masterStop();
     594:	03 c0       	rjmp	.+6      	; 0x59c <EEPROM_u8WriteWantedByte+0x56>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
     596:	86 e9       	ldi	r24, 0x96	; 150
     598:	01 c0       	rjmp	.+2      	; 0x59c <EEPROM_u8WriteWantedByte+0x56>
     59a:	86 e9       	ldi	r24, 0x96	; 150
	}
	return u8_ErrorInArg ; 
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	08 95       	ret

000005a6 <EEPROM_u8ReadNeededPartBlock>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
   
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
	if(((u8_EEPROM_MAX_BYTE_ADDRESS-u8_ByteNum)>=u8_ArrSize)  && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS && pu8_ArrWantedToRead!=NULL_POINTER )
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	e6 1b       	sub	r30, r22
     5ba:	f1 09       	sbc	r31, r1
     5bc:	02 2f       	mov	r16, r18
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	e0 17       	cp	r30, r16
     5c2:	f1 07       	cpc	r31, r17
     5c4:	0c f4       	brge	.+2      	; 0x5c8 <EEPROM_u8ReadNeededPartBlock+0x22>
     5c6:	42 c0       	rjmp	.+132    	; 0x64c <EEPROM_u8ReadNeededPartBlock+0xa6>
     5c8:	81 15       	cp	r24, r1
     5ca:	22 e0       	ldi	r18, 0x02	; 2
     5cc:	92 07       	cpc	r25, r18
     5ce:	08 f0       	brcs	.+2      	; 0x5d2 <EEPROM_u8ReadNeededPartBlock+0x2c>
     5d0:	3f c0       	rjmp	.+126    	; 0x650 <EEPROM_u8ReadNeededPartBlock+0xaa>
     5d2:	41 15       	cp	r20, r1
     5d4:	51 05       	cpc	r21, r1
     5d6:	f1 f1       	breq	.+124    	; 0x654 <EEPROM_u8ReadNeededPartBlock+0xae>
     5d8:	7a 01       	movw	r14, r20
     5da:	d6 2e       	mov	r13, r22
     5dc:	ec 01       	movw	r28, r24
	{
		
		I2C_masterStart();
     5de:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_masterStart>
		I2C_masterWriteToAddress(u8_EEPROM_DEVICE_ADD); 
     5e2:	80 e5       	ldi	r24, 0x50	; 80
     5e4:	0e 94 ce 08 	call	0x119c	; 0x119c <I2C_masterWriteToAddress>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
     5e8:	ce 01       	movw	r24, r28
     5ea:	96 95       	lsr	r25
     5ec:	87 95       	ror	r24
     5ee:	96 95       	lsr	r25
     5f0:	87 95       	ror	r24
		I2C_masterWriteData(u8_PageAdd) ;
     5f2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
     5f6:	8c 2f       	mov	r24, r28
     5f8:	82 95       	swap	r24
     5fa:	88 0f       	add	r24, r24
     5fc:	88 0f       	add	r24, r24
     5fe:	80 7c       	andi	r24, 0xC0	; 192
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
     600:	8d 29       	or	r24, r13
     602:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		I2C_repeatedStart();
     606:	0e 94 c4 08 	call	0x1188	; 0x1188 <I2C_repeatedStart>
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
     60a:	80 e5       	ldi	r24, 0x50	; 80
     60c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <I2C_masterReadFromAddress>
		for(u8_ArrIndex= u8_EEPROM_INTIAL_VAL;u8_ArrIndex<(u8_ArrSize - u8_EEPROM_LAST);u8_ArrIndex++)
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	09 c0       	rjmp	.+18     	; 0x626 <EEPROM_u8ReadNeededPartBlock+0x80>
		{
			
			pu8_ArrWantedToRead[u8_ArrIndex] = I2C_masterReadData();
     614:	0e 94 07 09 	call	0x120e	; 0x120e <I2C_masterReadData>
     618:	f7 01       	movw	r30, r14
     61a:	ec 0f       	add	r30, r28
     61c:	f1 1d       	adc	r31, r1
     61e:	80 83       	st	Z, r24
			if(pu8_ArrWantedToRead[u8_ArrIndex] == NULL_CHAR )
     620:	88 23       	and	r24, r24
     622:	49 f0       	breq	.+18     	; 0x636 <EEPROM_u8ReadNeededPartBlock+0x90>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
		I2C_repeatedStart();
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
		for(u8_ArrIndex= u8_EEPROM_INTIAL_VAL;u8_ArrIndex<(u8_ArrSize - u8_EEPROM_LAST);u8_ArrIndex++)
     624:	cf 5f       	subi	r28, 0xFF	; 255
     626:	8c 2f       	mov	r24, r28
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	98 01       	movw	r18, r16
     62c:	22 50       	subi	r18, 0x02	; 2
     62e:	31 09       	sbc	r19, r1
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	7c f3       	brlt	.-34     	; 0x614 <EEPROM_u8ReadNeededPartBlock+0x6e>
			if(pu8_ArrWantedToRead[u8_ArrIndex] == NULL_CHAR )
			{
				break;
			}
		}
		pu8_ArrWantedToRead[u8_ArrIndex] = I2C_masterReadFinalData();
     636:	c7 01       	movw	r24, r14
     638:	8c 0f       	add	r24, r28
     63a:	91 1d       	adc	r25, r1
     63c:	ec 01       	movw	r28, r24
     63e:	0e 94 12 09 	call	0x1224	; 0x1224 <I2C_masterReadFinalData>
     642:	88 83       	st	Y, r24
		I2C_masterStop();
     644:	0e 94 1d 09 	call	0x123a	; 0x123a <I2C_masterStop>
uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
   
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
     648:	87 e9       	ldi	r24, 0x97	; 151
			{
				break;
			}
		}
		pu8_ArrWantedToRead[u8_ArrIndex] = I2C_masterReadFinalData();
		I2C_masterStop();
     64a:	05 c0       	rjmp	.+10     	; 0x656 <EEPROM_u8ReadNeededPartBlock+0xb0>
		
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
     64c:	86 e9       	ldi	r24, 0x96	; 150
     64e:	03 c0       	rjmp	.+6      	; 0x656 <EEPROM_u8ReadNeededPartBlock+0xb0>
     650:	86 e9       	ldi	r24, 0x96	; 150
     652:	01 c0       	rjmp	.+2      	; 0x656 <EEPROM_u8ReadNeededPartBlock+0xb0>
     654:	86 e9       	ldi	r24, 0x96	; 150
	}
	return u8_ErrorInArg ; 
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	08 95       	ret

00000666 <EEPROM_u8ReadWantedByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadWantedByte(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* u8_WantedToRead)
{
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
	if((u8_ByteNum<u8_EEPROM_MAX_BYTE_ADDRESS) && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS && u8_WantedToRead!=NULL_POINTER )
     670:	60 34       	cpi	r22, 0x40	; 64
     672:	58 f5       	brcc	.+86     	; 0x6ca <EEPROM_u8ReadWantedByte+0x64>
     674:	81 15       	cp	r24, r1
     676:	22 e0       	ldi	r18, 0x02	; 2
     678:	92 07       	cpc	r25, r18
     67a:	48 f5       	brcc	.+82     	; 0x6ce <EEPROM_u8ReadWantedByte+0x68>
     67c:	41 15       	cp	r20, r1
     67e:	51 05       	cpc	r21, r1
     680:	41 f1       	breq	.+80     	; 0x6d2 <EEPROM_u8ReadWantedByte+0x6c>
     682:	7a 01       	movw	r14, r20
     684:	16 2f       	mov	r17, r22
     686:	ec 01       	movw	r28, r24
	{
		I2C_masterStart();
     688:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_masterStart>
		I2C_masterWriteToAddress(u8_EEPROM_DEVICE_ADD) ; 
     68c:	80 e5       	ldi	r24, 0x50	; 80
     68e:	0e 94 ce 08 	call	0x119c	; 0x119c <I2C_masterWriteToAddress>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
     692:	ce 01       	movw	r24, r28
     694:	96 95       	lsr	r25
     696:	87 95       	ror	r24
     698:	96 95       	lsr	r25
     69a:	87 95       	ror	r24
		I2C_masterWriteData(u8_PageAdd) ;
     69c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
     6a0:	8c 2f       	mov	r24, r28
     6a2:	82 95       	swap	r24
     6a4:	88 0f       	add	r24, r24
     6a6:	88 0f       	add	r24, r24
     6a8:	80 7c       	andi	r24, 0xC0	; 192
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
     6aa:	81 2b       	or	r24, r17
     6ac:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <I2C_masterWriteData>
		I2C_repeatedStart();
     6b0:	0e 94 c4 08 	call	0x1188	; 0x1188 <I2C_repeatedStart>
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
     6b4:	80 e5       	ldi	r24, 0x50	; 80
     6b6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <I2C_masterReadFromAddress>
		*(u8_WantedToRead) = I2C_masterReadData();
     6ba:	0e 94 07 09 	call	0x120e	; 0x120e <I2C_masterReadData>
     6be:	f7 01       	movw	r30, r14
     6c0:	80 83       	st	Z, r24
		I2C_masterStop();
     6c2:	0e 94 1d 09 	call	0x123a	; 0x123a <I2C_masterStop>
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadWantedByte(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* u8_WantedToRead)
{
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
     6c6:	87 e9       	ldi	r24, 0x97	; 151
		u8_ByteNum|=u8_PageAdd ; 
		I2C_masterWriteData(u8_ByteNum) ;
		I2C_repeatedStart();
		I2C_masterReadFromAddress(u8_EEPROM_DEVICE_ADD) ;
		*(u8_WantedToRead) = I2C_masterReadData();
		I2C_masterStop();
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <EEPROM_u8ReadWantedByte+0x6e>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
     6ca:	86 e9       	ldi	r24, 0x96	; 150
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <EEPROM_u8ReadWantedByte+0x6e>
     6ce:	86 e9       	ldi	r24, 0x96	; 150
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <EEPROM_u8ReadWantedByte+0x6e>
     6d2:	86 e9       	ldi	r24, 0x96	; 150
	}
	return u8_ErrorInArg ; 
	
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	08 95       	ret

000006e0 <Key_U8Delay>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"


uint32_t Key_U8Delay(uint8_t au8_delayper_milli)
{
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17

	uint32_t au32_delay_micro =(uint32_t) au8_delayper_milli *(uint32_t)1000;
     6e4:	28 2f       	mov	r18, r24
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	a8 ee       	ldi	r26, 0xE8	; 232
     6ea:	b3 e0       	ldi	r27, 0x03	; 3
     6ec:	0e 94 9f 11 	call	0x233e	; 0x233e <__umulhisi3>

	uint32_t au32_counter=0;
	au32_counter = au32_delay_micro *8;
     6f0:	8b 01       	movw	r16, r22
     6f2:	9c 01       	movw	r18, r24
     6f4:	00 0f       	add	r16, r16
     6f6:	11 1f       	adc	r17, r17
     6f8:	22 1f       	adc	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	00 0f       	add	r16, r16
     6fe:	11 1f       	adc	r17, r17
     700:	22 1f       	adc	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	00 0f       	add	r16, r16
     706:	11 1f       	adc	r17, r17
     708:	22 1f       	adc	r18, r18
     70a:	33 1f       	adc	r19, r19
	for(uint32_t au64_Local_counter =0 ;au64_Local_counter<(au32_counter/8) ;au64_Local_counter++)
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	dc 01       	movw	r26, r24
     712:	03 c0       	rjmp	.+6      	; 0x71a <Key_U8Delay+0x3a>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	a1 1d       	adc	r26, r1
     718:	b1 1d       	adc	r27, r1
     71a:	b9 01       	movw	r22, r18
     71c:	a8 01       	movw	r20, r16
     71e:	68 94       	set
     720:	12 f8       	bld	r1, 2
     722:	76 95       	lsr	r23
     724:	67 95       	ror	r22
     726:	57 95       	ror	r21
     728:	47 95       	ror	r20
     72a:	16 94       	lsr	r1
     72c:	d1 f7       	brne	.-12     	; 0x722 <Key_U8Delay+0x42>
     72e:	84 17       	cp	r24, r20
     730:	95 07       	cpc	r25, r21
     732:	a6 07       	cpc	r26, r22
     734:	b7 07       	cpc	r27, r23
     736:	70 f3       	brcs	.-36     	; 0x714 <Key_U8Delay+0x34>
	{

	}
	return au32_counter ;
}
     738:	c9 01       	movw	r24, r18
     73a:	b8 01       	movw	r22, r16
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <Keyad_VoidINit>:

void Keyad_VoidINit(void){

	// DIO_SetPortDirection(PORTD ,0b00001111);
	/*all rows inputs */
	DIO_SetPinDirection(PORTC ,PIN2 ,INPUT);
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	62 e0       	ldi	r22, 0x02	; 2
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN3 ,INPUT);
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	63 e0       	ldi	r22, 0x03	; 3
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN4 ,INPUT);
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	64 e0       	ldi	r22, 0x04	; 4
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB ,PIN2 ,INPUT);
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>

	/*all columns are outputs*/
	DIO_SetPinDirection(PORTC ,PIN5 ,OUTPUT);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	65 e0       	ldi	r22, 0x05	; 5
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN6 ,OUTPUT);
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	66 e0       	ldi	r22, 0x06	; 6
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTC ,PIN7 ,OUTPUT);
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	67 e0       	ldi	r22, 0x07	; 7
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB ,PIN3 ,OUTPUT);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	/*all output high*/
	DIO_SetPinValue(PORTC , PIN5 , HIGH);
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	65 e0       	ldi	r22, 0x05	; 5
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN6 , HIGH);
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN7 , HIGH);
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , PIN3 , HIGH);
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	63 e0       	ldi	r22, 0x03	; 3
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	/*pull up for inputs*/
	DIO_SetPinValue(PORTC , PIN2 , HIGH);
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN3 , HIGH);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	63 e0       	ldi	r22, 0x03	; 3
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTC , PIN4 , HIGH);
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , PIN2 , HIGH);
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	62 e0       	ldi	r22, 0x02	; 2
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     7e2:	08 95       	ret

000007e4 <KeyPad_U8Data>:
}


uint8_t KeyPad_U8Data(void)
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
	uint8_t au8_Copy_Pressed_key=20;
	uint8_t au8_Copy_Colum;
	uint8_t au8_Copy_Row;

	for(au8_Copy_Colum=START_CO;au8_Copy_Colum<=MAX_CO;au8_Copy_Colum++)
     7e8:	d5 e0       	ldi	r29, 0x05	; 5
     7ea:	70 c0       	rjmp	.+224    	; 0x8cc <__stack+0x6d>
	{
		if(au8_Copy_Colum == 8 )
     7ec:	d8 30       	cpi	r29, 0x08	; 8
     7ee:	39 f4       	brne	.+14     	; 0x7fe <KeyPad_U8Data+0x1a>
		{
			DIO_SetPinValue(PORTB , PIN3 , LOW);
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	63 e0       	ldi	r22, 0x03	; 3
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , PIN2 , HIGH);
}


uint8_t KeyPad_U8Data(void)
{
     7fa:	c2 e0       	ldi	r28, 0x02	; 2
     7fc:	56 c0       	rjmp	.+172    	; 0x8aa <__stack+0x4b>
		{
			DIO_SetPinValue(PORTB , PIN3 , LOW);
		}
		else
		{
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), LOW);
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	6d 2f       	mov	r22, r29
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     808:	f8 cf       	rjmp	.-16     	; 0x7fa <KeyPad_U8Data+0x16>
		}
		for(au8_Copy_Row=START_ROW;au8_Copy_Row<=MAX_ROW; au8_Copy_Row++)
		{

			if(au8_Copy_Row <5)
     80a:	c5 30       	cpi	r28, 0x05	; 5
     80c:	30 f5       	brcc	.+76     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				if ((LOW == DIO_GetPinValue(PORTC,(au8_Copy_Row))) )
     80e:	6c 2f       	mov	r22, r28
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_GetPinValue>
     816:	81 11       	cpse	r24, r1
     818:	47 c0       	rjmp	.+142    	; 0x8a8 <__stack+0x49>
				{
					Key_U8Delay(40);
     81a:	88 e2       	ldi	r24, 0x28	; 40
     81c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <Key_U8Delay>

					while((LOW == DIO_GetPinValue(PORTC,au8_Copy_Row )));
     820:	6c 2f       	mov	r22, r28
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_GetPinValue>
     828:	88 23       	and	r24, r24
     82a:	d1 f3       	breq	.-12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>

					DIO_SetPinValue(PORTC ,(au8_Copy_Colum), HIGH);
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	6d 2f       	mov	r22, r29
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
					return g_keymap[au8_Copy_Row-2][au8_Copy_Colum-5];
     836:	8c 2f       	mov	r24, r28
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 97       	sbiw	r24, 0x02	; 2
     83c:	2d 2f       	mov	r18, r29
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	25 50       	subi	r18, 0x05	; 5
     842:	31 09       	sbc	r19, r1
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	89 5d       	subi	r24, 0xD9	; 217
     84e:	9d 4f       	sbci	r25, 0xFD	; 253
     850:	fc 01       	movw	r30, r24
     852:	e2 0f       	add	r30, r18
     854:	f3 1f       	adc	r31, r19
     856:	80 81       	ld	r24, Z
     858:	3d c0       	rjmp	.+122    	; 0x8d4 <__stack+0x75>
				else
				{/*for MEZRARULE */};
			}
			else
			{
				if ( ( LOW== DIO_GetPinValue(PORTB,PIN2) ) )
     85a:	62 e0       	ldi	r22, 0x02	; 2
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_GetPinValue>
     862:	81 11       	cpse	r24, r1
     864:	21 c0       	rjmp	.+66     	; 0x8a8 <__stack+0x49>
				{
					Key_U8Delay(20);
     866:	84 e1       	ldi	r24, 0x14	; 20
     868:	0e 94 70 03 	call	0x6e0	; 0x6e0 <Key_U8Delay>

					while((LOW == DIO_GetPinValue(PORTB,PIN2 ) ))
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>

					DIO_SetPinValue(PORTB , PIN3 , HIGH);
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	63 e0       	ldi	r22, 0x03	; 3
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
			{
				if ( ( LOW== DIO_GetPinValue(PORTB,PIN2) ) )
				{
					Key_U8Delay(20);

					while((LOW == DIO_GetPinValue(PORTB,PIN2 ) ))
     878:	62 e0       	ldi	r22, 0x02	; 2
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_GetPinValue>
     880:	88 23       	and	r24, r24
     882:	a9 f3       	breq	.-22     	; 0x86e <__stack+0xf>

					DIO_SetPinValue(PORTB , PIN3 , HIGH);

					return g_keymap[au8_Copy_Row-2][au8_Copy_Colum-5];
     884:	8c 2f       	mov	r24, r28
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	02 97       	sbiw	r24, 0x02	; 2
     88a:	2d 2f       	mov	r18, r29
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	25 50       	subi	r18, 0x05	; 5
     890:	31 09       	sbc	r19, r1
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	89 5d       	subi	r24, 0xD9	; 217
     89c:	9d 4f       	sbci	r25, 0xFD	; 253
     89e:	fc 01       	movw	r30, r24
     8a0:	e2 0f       	add	r30, r18
     8a2:	f3 1f       	adc	r31, r19
     8a4:	80 81       	ld	r24, Z
     8a6:	16 c0       	rjmp	.+44     	; 0x8d4 <__stack+0x75>
		}
		else
		{
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), LOW);
		}
		for(au8_Copy_Row=START_ROW;au8_Copy_Row<=MAX_ROW; au8_Copy_Row++)
     8a8:	cf 5f       	subi	r28, 0xFF	; 255
     8aa:	c6 30       	cpi	r28, 0x06	; 6
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	ad cf       	rjmp	.-166    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				{/*for MEZRARULE */};
			}


		}
		if(au8_Copy_Colum == 8 )
     8b0:	d8 30       	cpi	r29, 0x08	; 8
     8b2:	31 f4       	brne	.+12     	; 0x8c0 <__stack+0x61>
		{
			DIO_SetPinValue(PORTB , PIN3 , HIGH);
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	63 e0       	ldi	r22, 0x03	; 3
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__stack+0x6b>
		}
		else
		{
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), HIGH);
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	6d 2f       	mov	r22, r29
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
{
	uint8_t au8_Copy_Pressed_key=20;
	uint8_t au8_Copy_Colum;
	uint8_t au8_Copy_Row;

	for(au8_Copy_Colum=START_CO;au8_Copy_Colum<=MAX_CO;au8_Copy_Colum++)
     8ca:	df 5f       	subi	r29, 0xFF	; 255
     8cc:	d9 30       	cpi	r29, 0x09	; 9
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	8d cf       	rjmp	.-230    	; 0x7ec <KeyPad_U8Data+0x8>
			DIO_SetPinValue(PORTC ,(au8_Copy_Colum), HIGH);
		}
	}


	return au8_Copy_Pressed_key;
     8d2:	84 e1       	ldi	r24, 0x14	; 20


}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <LCD_command>:
	LCD_command(0x0C);
	TIMER0_msdelay(10);                                    
}

void LCD_command(uint8_t u8_command)
{	
     8da:	cf 93       	push	r28
     8dc:	c8 2f       	mov	r28, r24
	/**************************************************************/ 
	
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER =  (DATA_REGISTER & (0x0F)) |  (u8_command & (0xF0));
     8de:	8b b3       	in	r24, 0x1b	; 27
     8e0:	8f 70       	andi	r24, 0x0F	; 15
     8e2:	9c 2f       	mov	r25, r28
     8e4:	90 7f       	andi	r25, 0xF0	; 240
     8e6:	89 2b       	or	r24, r25
     8e8:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,LOW);
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	63 e0       	ldi	r22, 0x03	; 3
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	63 e0       	ldi	r22, 0x03	; 3
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_command << 4);
     918:	2b b3       	in	r18, 0x1b	; 27
     91a:	30 e1       	ldi	r19, 0x10	; 16
     91c:	c3 9f       	mul	r28, r19
     91e:	c0 01       	movw	r24, r0
     920:	11 24       	eor	r1, r1
     922:	92 2f       	mov	r25, r18
     924:	9f 70       	andi	r25, 0x0F	; 15
     926:	89 2b       	or	r24, r25
     928:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);  /**********************************************************/
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Here we set EN pin to high when reading               */
     934:	8a e0       	ldi	r24, 0x0A	; 10
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	63 e0       	ldi	r22, 0x03	; 3
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
     946:	8a e0       	ldi	r24, 0x0A	; 10
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
}                                    /**********************************************************/
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <LCD_init>:
#include "../../MCAL/TIMERS/TIMERS.h"
#include "LCD.h"

void LCD_init()
{
	TIMER0_msdelay(100);
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	/*******************************************************/
	/* Configuring LCD Control and Data pins to be outputs */
	/*******************************************************/
	DIO_SetPinDirection(PORTA,RS,OUTPUT);
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,RW,OUTPUT);
     964:	41 e0       	ldi	r20, 0x01	; 1
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,EN,OUTPUT);
     96e:	41 e0       	ldi	r20, 0x01	; 1
     970:	63 e0       	ldi	r22, 0x03	; 3
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D4,OUTPUT);
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	64 e0       	ldi	r22, 0x04	; 4
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D5,OUTPUT);
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	65 e0       	ldi	r22, 0x05	; 5
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D6,OUTPUT);
     98c:	41 e0       	ldi	r20, 0x01	; 1
     98e:	66 e0       	ldi	r22, 0x06	; 6
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,D7,OUTPUT);
     996:	41 e0       	ldi	r20, 0x01	; 1
     998:	67 e0       	ldi	r22, 0x07	; 7
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	//TIMER0_msdelay(100);
	
	/********************/
	/* Initial Commands */
	/********************/    
	LCD_command(0x3);
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9a6:	8a e0       	ldi	r24, 0x0A	; 10
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x3);
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x3);
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x2);
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x28);
     9d8:	88 e2       	ldi	r24, 0x28	; 40
     9da:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x08);
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x01);
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x06);
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);
     a08:	8a e0       	ldi	r24, 0x0A	; 10
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	LCD_command(0x0C);
     a10:	8c e0       	ldi	r24, 0x0C	; 12
     a12:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	TIMER0_msdelay(10);                                    
     a16:	8a e0       	ldi	r24, 0x0A	; 10
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
     a1e:	08 95       	ret

00000a20 <LCD_data>:
	DIO_SetPinValue(PORTA,EN,LOW);   /*  and then set it low to latch the input data.          */
	TIMER0_msdelay(10);              /*  Delays are used to give the LCD needed processing time*/     
}                                    /**********************************************************/

void LCD_data(uint8_t u8_data)
{	
     a20:	cf 93       	push	r28
     a22:	c8 2f       	mov	r28, r24
	/*************************/
	/* Sending higher nipple */
	/*************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data & (0xF0));
     a24:	8b b3       	in	r24, 0x1b	; 27
     a26:	8f 70       	andi	r24, 0x0F	; 15
     a28:	9c 2f       	mov	r25, r28
     a2a:	90 7f       	andi	r25, 0xF0	; 240
     a2c:	89 2b       	or	r24, r25
     a2e:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,RS,HIGH);
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,EN,HIGH);
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	63 e0       	ldi	r22, 0x03	; 3
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	63 e0       	ldi	r22, 0x03	; 3
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	
	/************************/
	/* Sending lower nipple */
	/************************/
	DATA_REGISTER = (DATA_REGISTER & (0x0F)) |  (u8_data << 4);
     a5e:	2b b3       	in	r18, 0x1b	; 27
     a60:	30 e1       	ldi	r19, 0x10	; 16
     a62:	c3 9f       	mul	r28, r19
     a64:	c0 01       	movw	r24, r0
     a66:	11 24       	eor	r1, r1
     a68:	92 2f       	mov	r25, r18
     a6a:	9f 70       	andi	r25, 0x0F	; 15
     a6c:	89 2b       	or	r24, r25
     a6e:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(PORTA,EN,HIGH);
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	63 e0       	ldi	r22, 0x03	; 3
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10);
     a7a:	8a e0       	ldi	r24, 0x0A	; 10
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	DIO_SetPinValue(PORTA,EN,LOW);
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	TIMER0_msdelay(10); 
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
}
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <LCD_printString>:

void LCD_printString(uint8_t* stream)
{
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	8c 01       	movw	r16, r24
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <LCD_printString+0x12>
	{
		LCD_data(stream[u8_index]);
     aa4:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_data>

void LCD_printString(uint8_t* stream)
{
	uint8_t u8_index;
	
	for (u8_index = 0 ; stream[u8_index] != 0 ; u8_index++)
     aa8:	cf 5f       	subi	r28, 0xFF	; 255
     aaa:	f8 01       	movw	r30, r16
     aac:	ec 0f       	add	r30, r28
     aae:	f1 1d       	adc	r31, r1
     ab0:	80 81       	ld	r24, Z
     ab2:	81 11       	cpse	r24, r1
     ab4:	f7 cf       	rjmp	.-18     	; 0xaa4 <LCD_printString+0xc>
	{
		LCD_data(stream[u8_index]);
	}
}
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <LCD_printDigits>:

void LCD_printDigits(uint32_t u32_number)
{	volatile uint8_t  u8_temp;
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	28 97       	sbiw	r28, 0x08	; 8
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t  u8_weight;
	volatile uint8_t  u8_data;
	volatile uint8_t  u8_digits;
	volatile float    f32_temp;
	
	u8_weight = log10(u32_number);
     ada:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatunsisf>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <log10>
     ae6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fixunssfsi>
     aea:	6a 83       	std	Y+2, r22	; 0x02
	u8_digits = (u8_weight + 1);
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	8c 83       	std	Y+4, r24	; 0x04
	u8_temp   = (u32_number / pow(10,u8_weight));
     af2:	6a 81       	ldd	r22, Y+2	; 0x02
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatunsisf>
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	80 e2       	ldi	r24, 0x20	; 32
     b08:	91 e4       	ldi	r25, 0x41	; 65
     b0a:	0e 94 48 10 	call	0x2090	; 0x2090 <pow>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c7 01       	movw	r24, r14
     b14:	b6 01       	movw	r22, r12
     b16:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     b1a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fixunssfsi>
     b1e:	69 83       	std	Y+1, r22	; 0x01
	f32_temp  = ((u32_number*1.0) / pow(10,u8_weight));
     b20:	6a 81       	ldd	r22, Y+2	; 0x02
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatunsisf>
     b2c:	9b 01       	movw	r18, r22
     b2e:	ac 01       	movw	r20, r24
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e2       	ldi	r24, 0x20	; 32
     b36:	91 e4       	ldi	r25, 0x41	; 65
     b38:	0e 94 48 10 	call	0x2090	; 0x2090 <pow>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	c7 01       	movw	r24, r14
     b42:	b6 01       	movw	r22, r12
     b44:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     b48:	6d 83       	std	Y+5, r22	; 0x05
     b4a:	7e 83       	std	Y+6, r23	; 0x06
     b4c:	8f 83       	std	Y+7, r24	; 0x07
     b4e:	98 87       	std	Y+8, r25	; 0x08
	do
	{
		u8_data  = (u8_temp | (3 << 4));
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	80 63       	ori	r24, 0x30	; 48
     b54:	8b 83       	std	Y+3, r24	; 0x03
		LCD_data(u8_data);
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_data>
		u8_digits--;
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	81 50       	subi	r24, 0x01	; 1
     b60:	8c 83       	std	Y+4, r24	; 0x04
		f32_temp = f32_temp - u8_temp;
     b62:	cd 80       	ldd	r12, Y+5	; 0x05
     b64:	de 80       	ldd	r13, Y+6	; 0x06
     b66:	ef 80       	ldd	r14, Y+7	; 0x07
     b68:	f8 84       	ldd	r15, Y+8	; 0x08
     b6a:	69 81       	ldd	r22, Y+1	; 0x01
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__floatsisf>
     b76:	9b 01       	movw	r18, r22
     b78:	ac 01       	movw	r20, r24
     b7a:	c7 01       	movw	r24, r14
     b7c:	b6 01       	movw	r22, r12
     b7e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__subsf3>
     b82:	6d 83       	std	Y+5, r22	; 0x05
     b84:	7e 83       	std	Y+6, r23	; 0x06
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
		u8_temp  = (f32_temp * 10);
     b8a:	6d 81       	ldd	r22, Y+5	; 0x05
     b8c:	7e 81       	ldd	r23, Y+6	; 0x06
     b8e:	8f 81       	ldd	r24, Y+7	; 0x07
     b90:	98 85       	ldd	r25, Y+8	; 0x08
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e2       	ldi	r20, 0x20	; 32
     b98:	51 e4       	ldi	r21, 0x41	; 65
     b9a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     b9e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fixunssfsi>
     ba2:	69 83       	std	Y+1, r22	; 0x01
		f32_temp = (f32_temp *(10*1.0));
     ba4:	6d 81       	ldd	r22, Y+5	; 0x05
     ba6:	7e 81       	ldd	r23, Y+6	; 0x06
     ba8:	8f 81       	ldd	r24, Y+7	; 0x07
     baa:	98 85       	ldd	r25, Y+8	; 0x08
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e2       	ldi	r20, 0x20	; 32
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
     bb8:	6d 83       	std	Y+5, r22	; 0x05
     bba:	7e 83       	std	Y+6, r23	; 0x06
     bbc:	8f 83       	std	Y+7, r24	; 0x07
     bbe:	98 87       	std	Y+8, r25	; 0x08
	} while (u8_digits);
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	81 11       	cpse	r24, r1
     bc4:	c5 cf       	rjmp	.-118    	; 0xb50 <LCD_printDigits+0x92>
}
     bc6:	28 96       	adiw	r28, 0x08	; 8
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	08 95       	ret

00000be0 <LCD_cursorMove>:

void LCD_cursorMove(uint8_t u8_direction, uint8_t u8_numOfMoves){
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	d8 2f       	mov	r29, r24
     be8:	16 2f       	mov	r17, r22
	
uint8_t u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;
for(u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;u8_counterMoveCursor < u8_numOfMoves;u8_counterMoveCursor++)
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	14 c0       	rjmp	.+40     	; 0xc16 <LCD_cursorMove+0x36>
{
	if(LEFT == u8_direction){
     bee:	d0 31       	cpi	r29, 0x10	; 16
     bf0:	41 f4       	brne	.+16     	; 0xc02 <LCD_cursorMove+0x22>
		LCD_command(LEFT);
     bf2:	80 e1       	ldi	r24, 0x10	; 16
     bf4:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
		TIMER0_msdelay(5);
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <LCD_cursorMove+0x34>
	}
	else if(RIGHT == u8_direction){
     c02:	d4 31       	cpi	r29, 0x14	; 20
     c04:	39 f4       	brne	.+14     	; 0xc14 <LCD_cursorMove+0x34>
		LCD_command(RIGHT);
     c06:	84 e1       	ldi	r24, 0x14	; 20
     c08:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
		TIMER0_msdelay(5);
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
}

void LCD_cursorMove(uint8_t u8_direction, uint8_t u8_numOfMoves){
	
uint8_t u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;
for(u8_counterMoveCursor = u8_LCD_INTIAL_VAL ;u8_counterMoveCursor < u8_numOfMoves;u8_counterMoveCursor++)
     c14:	cf 5f       	subi	r28, 0xFF	; 255
     c16:	c1 17       	cp	r28, r17
     c18:	50 f3       	brcs	.-44     	; 0xbee <LCD_cursorMove+0xe>
	else if(RIGHT == u8_direction){
		LCD_command(RIGHT);
		TIMER0_msdelay(5);
	}
}
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	08 95       	ret

00000c22 <LCD_newLine>:

void LCD_newLine(void)
{
	LCD_command(0xC0);
     c22:	80 ec       	ldi	r24, 0xC0	; 192
     c24:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
     c28:	08 95       	ret

00000c2a <LM35_voidInit>:



void LM35_voidInit(void) 
{
	DIO_SetPinDirection(PORTA,PIN0,INPUT);
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTA,PIN0,LOW);
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
	ADC_voidInit(); 
     c3e:	0e 94 f4 06 	call	0xde8	; 0xde8 <ADC_voidInit>
	ADC_voidStartConversion();
     c42:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_voidStartConversion>
     c46:	08 95       	ret

00000c48 <LM35_u8GetTempInC>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	00 d0       	rcall	.+0      	; 0xc52 <LM35_u8GetTempInC+0xa>
     c52:	1f 92       	push	r1
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     c58:	19 82       	std	Y+1, r1	; 0x01
	uint16_t u16_AdcResult = u8_LM35_INTIALIZE_VAR ;
     c5a:	1b 82       	std	Y+3, r1	; 0x03
     c5c:	1a 82       	std	Y+2, r1	; 0x02
	if(pu8_ReturnAvgTemp!=NULL_POINTER)
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	09 f4       	brne	.+2      	; 0xc64 <LM35_u8GetTempInC+0x1c>
     c62:	56 c0       	rjmp	.+172    	; 0xd10 <LM35_u8GetTempInC+0xc8>
     c64:	8c 01       	movw	r16, r24
	{
		ADC_u8GetFlagInt(&u8_AdcIntFlag); 
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_u8GetFlagInt>
		if(u8_AdcIntFlag==u8_ADC_FLAG_RISE )
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <LM35_u8GetTempInC+0x54>
		{
			ADC_u8GetResult(&u16_AdcResult) ;
     c74:	ce 01       	movw	r24, r28
     c76:	02 96       	adiw	r24, 0x02	; 2
     c78:	0e 94 37 07 	call	0xe6e	; 0xe6e <ADC_u8GetResult>
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			else if(u8_ADC_VREF== u8_ADC_2560mV_INTERNAL_REF)
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
     c7c:	2a 81       	ldd	r18, Y+2	; 0x02
     c7e:	3b 81       	ldd	r19, Y+3	; 0x03
     c80:	a4 ec       	ldi	r26, 0xC4	; 196
     c82:	b9 e0       	ldi	r27, 0x09	; 9
     c84:	0e 94 9f 11 	call	0x233e	; 0x233e <__umulhisi3>
     c88:	20 e1       	ldi	r18, 0x10	; 16
     c8a:	37 e2       	ldi	r19, 0x27	; 39
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__udivmodsi4>
     c94:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <su8_NewTemp3.1638>
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
     c98:	8d e3       	ldi	r24, 0x3D	; 61
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <LM35_u8GetTempInC+0x56>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
     c9c:	8c e3       	ldi	r24, 0x3C	; 60
			{
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
		}
		if(su8_Temp2==0)
     c9e:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <su8_Temp2.1637>
     ca2:	91 11       	cpse	r25, r1
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <LM35_u8GetTempInC+0x66>
		{
			su8_Temp2 = su8_NewTemp3 ; 
     ca6:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <su8_NewTemp3.1638>
     caa:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <su8_Temp2.1637>
		}
		if(su8_Temp1==0)
     cae:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <su8_Temp1.1636>
     cb2:	91 11       	cpse	r25, r1
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <LM35_u8GetTempInC+0x76>
		{
			su8_Temp1 = su8_Temp2 ; 
     cb6:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <su8_Temp2.1637>
     cba:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <su8_Temp1.1636>
		}
		if(su8_Temp4==0)
     cbe:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <__data_end>
     cc2:	91 11       	cpse	r25, r1
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <LM35_u8GetTempInC+0x86>
		{
			su8_Temp4 = su8_Temp1;
     cc6:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <su8_Temp1.1636>
     cca:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <__data_end>
		}
		*pu8_ReturnAvgTemp = (su8_Temp1 + su8_Temp2 + su8_Temp4 + su8_NewTemp3) / u8_LM35_NUM_OF_READINGS ; 
     cce:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <su8_Temp1.1636>
     cd2:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <su8_Temp2.1637>
     cd6:	24 2f       	mov	r18, r20
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	25 0f       	add	r18, r21
     cdc:	31 1d       	adc	r19, r1
     cde:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <__data_end>
     ce2:	29 0f       	add	r18, r25
     ce4:	31 1d       	adc	r19, r1
     ce6:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <su8_NewTemp3.1638>
     cea:	29 0f       	add	r18, r25
     cec:	31 1d       	adc	r19, r1
     cee:	33 23       	and	r19, r19
     cf0:	14 f4       	brge	.+4      	; 0xcf6 <LM35_u8GetTempInC+0xae>
     cf2:	2d 5f       	subi	r18, 0xFD	; 253
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	35 95       	asr	r19
     cf8:	27 95       	ror	r18
     cfa:	35 95       	asr	r19
     cfc:	27 95       	ror	r18
     cfe:	f8 01       	movw	r30, r16
     d00:	20 83       	st	Z, r18
		su8_Temp4 = su8_Temp1 ; 
     d02:	50 93 ec 02 	sts	0x02EC, r21	; 0x8002ec <__data_end>
		su8_Temp1 = su8_Temp2 ;
     d06:	40 93 ed 02 	sts	0x02ED, r20	; 0x8002ed <su8_Temp1.1636>
		su8_Temp2 = su8_NewTemp3; 
     d0a:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <su8_Temp2.1637>
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <LM35_u8GetTempInC+0xca>
	}
	else 
	{
		u8_ErrorState = u8_LM35_NOK ;
     d10:	8e e3       	ldi	r24, 0x3E	; 62
	}
	return u8_ErrorState ; 
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <Motor_setDirection>:
{
	Motor_setDirection(MOTOR_ID_01,u8_Motor01Direction);
	Motor_setDirection(MOTOR_ID_02,u8_Motor02Direction);
	return MOTOR_ERROR_OK;

}
     d22:	84 31       	cpi	r24, 0x14	; 20
     d24:	19 f0       	breq	.+6      	; 0xd2c <Motor_setDirection+0xa>
     d26:	85 31       	cpi	r24, 0x15	; 21
     d28:	d9 f0       	breq	.+54     	; 0xd60 <Motor_setDirection+0x3e>
     d2a:	34 c0       	rjmp	.+104    	; 0xd94 <Motor_setDirection+0x72>
     d2c:	67 31       	cpi	r22, 0x17	; 23
     d2e:	61 f4       	brne	.+24     	; 0xd48 <Motor_setDirection+0x26>
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	62 e0       	ldi	r22, 0x02	; 2
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	63 e0       	ldi	r22, 0x03	; 3
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	63 e0       	ldi	r22, 0x03	; 3
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	08 95       	ret
     d60:	67 31       	cpi	r22, 0x17	; 23
     d62:	61 f4       	brne	.+24     	; 0xd7c <Motor_setDirection+0x5a>
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	66 e0       	ldi	r22, 0x06	; 6
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	67 e0       	ldi	r22, 0x07	; 7
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	08 95       	ret
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	66 e0       	ldi	r22, 0x06	; 6
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	67 e0       	ldi	r22, 0x07	; 7
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	08 95       	ret
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	08 95       	ret

00000d98 <motorOn>:
uint8_t motorOn(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     d98:	84 31       	cpi	r24, 0x14	; 20
     d9a:	19 f0       	breq	.+6      	; 0xda2 <motorOn+0xa>
     d9c:	85 31       	cpi	r24, 0x15	; 21
     d9e:	51 f0       	breq	.+20     	; 0xdb4 <motorOn+0x1c>
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <motorOn+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     da2:	0e 94 91 06 	call	0xd22	; 0xd22 <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, HIGH);
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	64 e0       	ldi	r22, 0x04	; 4
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     db4:	0e 94 91 06 	call	0xd22	; 0xd22 <Motor_setDirection>
			return MOTOR_ERROR_OK;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     dbe:	08 95       	ret

00000dc0 <motorOff>:
uint8_t motorOff(uint8_t MotorId, uint8_t u8_MotorDirection)
{
	switch(MotorId)
     dc0:	84 31       	cpi	r24, 0x14	; 20
     dc2:	19 f0       	breq	.+6      	; 0xdca <motorOff+0xa>
     dc4:	85 31       	cpi	r24, 0x15	; 21
     dc6:	51 f0       	breq	.+20     	; 0xddc <motorOff+0x1c>
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <motorOff+0x24>
	{
		case MOTOR_ID_01:
			Motor_setDirection(MotorId,u8_MotorDirection);
     dca:	0e 94 91 06 	call	0xd22	; 0xd22 <Motor_setDirection>
			DIO_SetPinValue(MOTOR_01_DIR_PORT, MOTOR_01_ENABLE_PIN, LOW);
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	64 e0       	ldi	r22, 0x04	; 4
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	0e 94 fd 07 	call	0xffa	; 0xffa <DIO_SetPinValue>
			return MOTOR_ERROR_OK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	08 95       	ret
			break;
		case MOTOR_ID_02:
			Motor_setDirection(MotorId,u8_MotorDirection);
     ddc:	0e 94 91 06 	call	0xd22	; 0xd22 <Motor_setDirection>
			return MOTOR_ERROR_OK;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	08 95       	ret
			break;
		default:
			return MOTOR_ERROR_NOK;
     de4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
     de6:	08 95       	ret

00000de8 <ADC_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidSetCallBack(void(*ISRFuncToSet)(void)) 
{
	ADCSetCallBackISR = ISRFuncToSet ;
     de8:	87 b1       	in	r24, 0x07	; 7
     dea:	80 68       	ori	r24, 0x80	; 128
     dec:	87 b9       	out	0x07, r24	; 7
     dee:	87 b1       	in	r24, 0x07	; 7
     df0:	80 64       	ori	r24, 0x40	; 64
     df2:	87 b9       	out	0x07, r24	; 7
     df4:	87 b1       	in	r24, 0x07	; 7
     df6:	8f 7e       	andi	r24, 0xEF	; 239
     df8:	87 b9       	out	0x07, r24	; 7
     dfa:	87 b1       	in	r24, 0x07	; 7
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	87 b9       	out	0x07, r24	; 7
     e00:	87 b1       	in	r24, 0x07	; 7
     e02:	8b 7f       	andi	r24, 0xFB	; 251
     e04:	87 b9       	out	0x07, r24	; 7
     e06:	87 b1       	in	r24, 0x07	; 7
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	87 b9       	out	0x07, r24	; 7
     e0c:	87 b1       	in	r24, 0x07	; 7
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	87 b9       	out	0x07, r24	; 7
     e12:	86 b1       	in	r24, 0x06	; 6
     e14:	80 68       	ori	r24, 0x80	; 128
     e16:	86 b9       	out	0x06, r24	; 6
     e18:	86 b1       	in	r24, 0x06	; 6
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	86 b9       	out	0x06, r24	; 6
     e1e:	86 b1       	in	r24, 0x06	; 6
     e20:	80 62       	ori	r24, 0x20	; 32
     e22:	86 b9       	out	0x06, r24	; 6
     e24:	80 b7       	in	r24, 0x30	; 48
     e26:	8f 77       	andi	r24, 0x7F	; 127
     e28:	80 bf       	out	0x30, r24	; 48
     e2a:	80 b7       	in	r24, 0x30	; 48
     e2c:	8f 7b       	andi	r24, 0xBF	; 191
     e2e:	80 bf       	out	0x30, r24	; 48
     e30:	80 b7       	in	r24, 0x30	; 48
     e32:	8f 7d       	andi	r24, 0xDF	; 223
     e34:	80 bf       	out	0x30, r24	; 48
     e36:	86 b1       	in	r24, 0x06	; 6
     e38:	84 60       	ori	r24, 0x04	; 4
     e3a:	86 b9       	out	0x06, r24	; 6
     e3c:	86 b1       	in	r24, 0x06	; 6
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	86 b9       	out	0x06, r24	; 6
     e42:	86 b1       	in	r24, 0x06	; 6
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	86 b9       	out	0x06, r24	; 6
     e48:	08 95       	ret

00000e4a <ADC_voidStartConversion>:
     e4a:	86 b1       	in	r24, 0x06	; 6
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	86 b9       	out	0x06, r24	; 6
     e50:	86 b1       	in	r24, 0x06	; 6
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	86 b9       	out	0x06, r24	; 6
     e56:	08 95       	ret

00000e58 <ADC_u8GetFlagInt>:
     e58:	fc 01       	movw	r30, r24
     e5a:	89 2b       	or	r24, r25
     e5c:	31 f0       	breq	.+12     	; 0xe6a <ADC_u8GetFlagInt+0x12>
     e5e:	96 b1       	in	r25, 0x06	; 6
     e60:	92 95       	swap	r25
     e62:	91 70       	andi	r25, 0x01	; 1
     e64:	90 83       	st	Z, r25
     e66:	8e e2       	ldi	r24, 0x2E	; 46
     e68:	08 95       	ret
     e6a:	8d e2       	ldi	r24, 0x2D	; 45
     e6c:	08 95       	ret

00000e6e <ADC_u8GetResult>:
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	79 f0       	breq	.+30     	; 0xe90 <ADC_u8GetResult+0x22>
     e72:	24 b1       	in	r18, 0x04	; 4
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	31 83       	std	Z+1, r19	; 0x01
     e7a:	20 83       	st	Z, r18
     e7c:	45 b1       	in	r20, 0x05	; 5
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	54 2f       	mov	r21, r20
     e82:	44 27       	eor	r20, r20
     e84:	24 2b       	or	r18, r20
     e86:	35 2b       	or	r19, r21
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	20 83       	st	Z, r18
     e8c:	8e e2       	ldi	r24, 0x2E	; 46
     e8e:	08 95       	ret
     e90:	8d e2       	ldi	r24, 0x2D	; 45
     e92:	08 95       	ret

00000e94 <__vector_16>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_16 (void)      __attribute__((signal));
void __vector_16 (void)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
	if(ADCSetCallBackISR!=NULL_POINTER)
     eb6:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <ADCSetCallBackISR>
     eba:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <ADCSetCallBackISR+0x1>
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__vector_16+0x30>
	{
		ADCSetCallBackISR() ;
     ec2:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <DIO_SetPinDirection>:
		case PORTD: PORTD_REG=VALUE;break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
			break;
	}//switch
	return au8_errorstate;
}//function
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	31 f1       	breq	.+76     	; 0xf36 <DIO_SetPinDirection+0x50>
     eea:	38 f0       	brcs	.+14     	; 0xefa <DIO_SetPinDirection+0x14>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	09 f4       	brne	.+2      	; 0xef2 <DIO_SetPinDirection+0xc>
     ef0:	40 c0       	rjmp	.+128    	; 0xf72 <DIO_SetPinDirection+0x8c>
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	09 f4       	brne	.+2      	; 0xef8 <DIO_SetPinDirection+0x12>
     ef6:	5a c0       	rjmp	.+180    	; 0xfac <DIO_SetPinDirection+0xc6>
     ef8:	76 c0       	rjmp	.+236    	; 0xfe6 <DIO_SetPinDirection+0x100>
     efa:	41 11       	cpse	r20, r1
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <DIO_SetPinDirection+0x32>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_SetPinDirection+0x22>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	6a 95       	dec	r22
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_SetPinDirection+0x1e>
     f0c:	80 95       	com	r24
     f0e:	9a b3       	in	r25, 0x1a	; 26
     f10:	89 23       	and	r24, r25
     f12:	8a bb       	out	0x1a, r24	; 26
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	08 95       	ret
     f18:	41 30       	cpi	r20, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <DIO_SetPinDirection+0x38>
     f1c:	66 c0       	rjmp	.+204    	; 0xfea <DIO_SetPinDirection+0x104>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_SetPinDirection+0x42>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	6a 95       	dec	r22
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_SetPinDirection+0x3e>
     f2c:	9a b3       	in	r25, 0x1a	; 26
     f2e:	89 2b       	or	r24, r25
     f30:	8a bb       	out	0x1a, r24	; 26
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	08 95       	ret
     f36:	41 11       	cpse	r20, r1
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <DIO_SetPinDirection+0x6e>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_SetPinDirection+0x5e>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	6a 95       	dec	r22
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_SetPinDirection+0x5a>
     f48:	80 95       	com	r24
     f4a:	97 b3       	in	r25, 0x17	; 23
     f4c:	89 23       	and	r24, r25
     f4e:	87 bb       	out	0x17, r24	; 23
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	08 95       	ret
     f54:	41 30       	cpi	r20, 0x01	; 1
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_SetPinDirection+0x74>
     f58:	4a c0       	rjmp	.+148    	; 0xfee <DIO_SetPinDirection+0x108>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_SetPinDirection+0x7e>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	6a 95       	dec	r22
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_SetPinDirection+0x7a>
     f68:	97 b3       	in	r25, 0x17	; 23
     f6a:	89 2b       	or	r24, r25
     f6c:	87 bb       	out	0x17, r24	; 23
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	08 95       	ret
     f72:	41 11       	cpse	r20, r1
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <DIO_SetPinDirection+0xaa>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_SetPinDirection+0x9a>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	6a 95       	dec	r22
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_SetPinDirection+0x96>
     f84:	80 95       	com	r24
     f86:	94 b3       	in	r25, 0x14	; 20
     f88:	89 23       	and	r24, r25
     f8a:	84 bb       	out	0x14, r24	; 20
     f8c:	84 e0       	ldi	r24, 0x04	; 4
     f8e:	08 95       	ret
     f90:	41 30       	cpi	r20, 0x01	; 1
     f92:	79 f5       	brne	.+94     	; 0xff2 <DIO_SetPinDirection+0x10c>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_SetPinDirection+0xb8>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	6a 95       	dec	r22
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_SetPinDirection+0xb4>
     fa2:	94 b3       	in	r25, 0x14	; 20
     fa4:	89 2b       	or	r24, r25
     fa6:	84 bb       	out	0x14, r24	; 20
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	08 95       	ret
     fac:	41 11       	cpse	r20, r1
     fae:	0d c0       	rjmp	.+26     	; 0xfca <DIO_SetPinDirection+0xe4>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_SetPinDirection+0xd4>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	6a 95       	dec	r22
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_SetPinDirection+0xd0>
     fbe:	80 95       	com	r24
     fc0:	91 b3       	in	r25, 0x11	; 17
     fc2:	89 23       	and	r24, r25
     fc4:	81 bb       	out	0x11, r24	; 17
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	08 95       	ret
     fca:	41 30       	cpi	r20, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <DIO_SetPinDirection+0x110>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_SetPinDirection+0xf2>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	6a 95       	dec	r22
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_SetPinDirection+0xee>
     fdc:	91 b3       	in	r25, 0x11	; 17
     fde:	89 2b       	or	r24, r25
     fe0:	81 bb       	out	0x11, r24	; 17
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	08 95       	ret
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	08 95       	ret
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	08 95       	ret
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	08 95       	ret
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	08 95       	ret
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	08 95       	ret

00000ffa <DIO_SetPinValue>:
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	31 f1       	breq	.+76     	; 0x104a <DIO_SetPinValue+0x50>
     ffe:	38 f0       	brcs	.+14     	; 0x100e <DIO_SetPinValue+0x14>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	09 f4       	brne	.+2      	; 0x1006 <DIO_SetPinValue+0xc>
    1004:	40 c0       	rjmp	.+128    	; 0x1086 <DIO_SetPinValue+0x8c>
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_SetPinValue+0x12>
    100a:	5a c0       	rjmp	.+180    	; 0x10c0 <DIO_SetPinValue+0xc6>
    100c:	76 c0       	rjmp	.+236    	; 0x10fa <DIO_SetPinValue+0x100>
    100e:	41 11       	cpse	r20, r1
    1010:	0d c0       	rjmp	.+26     	; 0x102c <DIO_SetPinValue+0x32>
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_SetPinValue+0x22>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	6a 95       	dec	r22
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_SetPinValue+0x1e>
    1020:	80 95       	com	r24
    1022:	9b b3       	in	r25, 0x1b	; 27
    1024:	89 23       	and	r24, r25
    1026:	8b bb       	out	0x1b, r24	; 27
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	08 95       	ret
    102c:	41 30       	cpi	r20, 0x01	; 1
    102e:	09 f0       	breq	.+2      	; 0x1032 <DIO_SetPinValue+0x38>
    1030:	66 c0       	rjmp	.+204    	; 0x10fe <DIO_SetPinValue+0x104>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_SetPinValue+0x42>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	6a 95       	dec	r22
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_SetPinValue+0x3e>
    1040:	9b b3       	in	r25, 0x1b	; 27
    1042:	89 2b       	or	r24, r25
    1044:	8b bb       	out	0x1b, r24	; 27
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	08 95       	ret
    104a:	41 11       	cpse	r20, r1
    104c:	0d c0       	rjmp	.+26     	; 0x1068 <DIO_SetPinValue+0x6e>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_SetPinValue+0x5e>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	6a 95       	dec	r22
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_SetPinValue+0x5a>
    105c:	80 95       	com	r24
    105e:	98 b3       	in	r25, 0x18	; 24
    1060:	89 23       	and	r24, r25
    1062:	88 bb       	out	0x18, r24	; 24
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	08 95       	ret
    1068:	41 30       	cpi	r20, 0x01	; 1
    106a:	09 f0       	breq	.+2      	; 0x106e <DIO_SetPinValue+0x74>
    106c:	4a c0       	rjmp	.+148    	; 0x1102 <DIO_SetPinValue+0x108>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_SetPinValue+0x7e>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	6a 95       	dec	r22
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_SetPinValue+0x7a>
    107c:	98 b3       	in	r25, 0x18	; 24
    107e:	89 2b       	or	r24, r25
    1080:	88 bb       	out	0x18, r24	; 24
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	08 95       	ret
    1086:	41 11       	cpse	r20, r1
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <DIO_SetPinValue+0xaa>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_SetPinValue+0x9a>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	6a 95       	dec	r22
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_SetPinValue+0x96>
    1098:	80 95       	com	r24
    109a:	95 b3       	in	r25, 0x15	; 21
    109c:	89 23       	and	r24, r25
    109e:	85 bb       	out	0x15, r24	; 21
    10a0:	84 e0       	ldi	r24, 0x04	; 4
    10a2:	08 95       	ret
    10a4:	41 30       	cpi	r20, 0x01	; 1
    10a6:	79 f5       	brne	.+94     	; 0x1106 <DIO_SetPinValue+0x10c>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_SetPinValue+0xb8>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	6a 95       	dec	r22
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_SetPinValue+0xb4>
    10b6:	95 b3       	in	r25, 0x15	; 21
    10b8:	89 2b       	or	r24, r25
    10ba:	85 bb       	out	0x15, r24	; 21
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	08 95       	ret
    10c0:	41 11       	cpse	r20, r1
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <DIO_SetPinValue+0xe4>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_SetPinValue+0xd4>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	6a 95       	dec	r22
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_SetPinValue+0xd0>
    10d2:	80 95       	com	r24
    10d4:	92 b3       	in	r25, 0x12	; 18
    10d6:	89 23       	and	r24, r25
    10d8:	82 bb       	out	0x12, r24	; 18
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	08 95       	ret
    10de:	41 30       	cpi	r20, 0x01	; 1
    10e0:	a1 f4       	brne	.+40     	; 0x110a <DIO_SetPinValue+0x110>
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_SetPinValue+0xf2>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	6a 95       	dec	r22
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_SetPinValue+0xee>
    10f0:	92 b3       	in	r25, 0x12	; 18
    10f2:	89 2b       	or	r24, r25
    10f4:	82 bb       	out	0x12, r24	; 18
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	08 95       	ret
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	08 95       	ret
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	08 95       	ret
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	08 95       	ret
    1106:	84 e0       	ldi	r24, 0x04	; 4
    1108:	08 95       	ret
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	08 95       	ret

0000110e <DIO_GetPinValue>:
uint8_t DIO_GetPinValue(uint8_t au8_PORT,uint8_t PIN)
{
	uint8_t PinValue;
	switch(au8_PORT)
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	79 f0       	breq	.+30     	; 0x1130 <DIO_GetPinValue+0x22>
    1112:	28 f0       	brcs	.+10     	; 0x111e <DIO_GetPinValue+0x10>
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	a9 f0       	breq	.+42     	; 0x1142 <DIO_GetPinValue+0x34>
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	e1 f0       	breq	.+56     	; 0x1154 <DIO_GetPinValue+0x46>
    111c:	24 c0       	rjmp	.+72     	; 0x1166 <DIO_GetPinValue+0x58>
	{
		case PORTA: PinValue = GET_BIT(PINA_REG,PIN); break;
    111e:	89 b3       	in	r24, 0x19	; 25
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_GetPinValue+0x1a>
    1124:	95 95       	asr	r25
    1126:	87 95       	ror	r24
    1128:	6a 95       	dec	r22
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_GetPinValue+0x16>
    112c:	81 70       	andi	r24, 0x01	; 1
    112e:	08 95       	ret
		case PORTB: PinValue = GET_BIT(PINB_REG,PIN); break;
    1130:	86 b3       	in	r24, 0x16	; 22
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_GetPinValue+0x2c>
    1136:	95 95       	asr	r25
    1138:	87 95       	ror	r24
    113a:	6a 95       	dec	r22
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_GetPinValue+0x28>
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	08 95       	ret
		case PORTC: PinValue = GET_BIT(PINC_REG,PIN); break;
    1142:	83 b3       	in	r24, 0x13	; 19
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_GetPinValue+0x3e>
    1148:	95 95       	asr	r25
    114a:	87 95       	ror	r24
    114c:	6a 95       	dec	r22
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_GetPinValue+0x3a>
    1150:	81 70       	andi	r24, 0x01	; 1
    1152:	08 95       	ret
		case PORTD: PinValue = GET_BIT(PIND_REG,PIN); break;
    1154:	80 b3       	in	r24, 0x10	; 16
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_GetPinValue+0x50>
    115a:	95 95       	asr	r25
    115c:	87 95       	ror	r24
    115e:	6a 95       	dec	r22
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_GetPinValue+0x4c>
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	08 95       	ret
		default:PinValue=DIO_CHOISE_NOT_FOUND;//error
    1166:	85 e0       	ldi	r24, 0x05	; 5
			break;
	}//switch
	return PinValue;
}//function
    1168:	08 95       	ret

0000116a <I2C_masterInit>:
/*                                       Master Transmit/Receive APIs Implementation                                  */
/**********************************************************************************************************************/
                                                                                                                      //
void I2C_masterInit(void){                                                                                            //
	                                     /************************************************/                           //
	Ru8_TWBR = BIT_RATE;                     /*  1 - Setting Bit Rate                        */                           //
    116a:	86 e4       	ldi	r24, 0x46	; 70
    116c:	80 b9       	out	0x00, r24	; 0
	#if PRESCALER == PRESCALER_1         /*                                              */                           //
	Ru8_TWSR = (0 << TWPS1) | (0 << TWPS0);  /*  2 - Prescaler Value Of 1                    */                           //
    116e:	11 b8       	out	0x01, r1	; 1
    1170:	08 95       	ret

00001172 <I2C_masterStart>:
	#endif                                                                                                            //
}                                                                                                                     //
                                                                                                                      //
void I2C_masterStart(void){                                                                                           //
	
	Ru8_TWCR = 0;                                                 /*****************************************************************/
    1172:	16 be       	out	0x36, r1	; 54
	Ru8_TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/* 1 - Reset I2C interrupt flag, send start condition, enable I2C*/
    1174:	84 ea       	ldi	r24, 0xA4	; 164
    1176:	86 bf       	out	0x36, r24	; 54
	while(!(Ru8_TWCR & (1 << TWINT)));                   /* 2 - Stay here until start condition has been transmitted      */
    1178:	06 b6       	in	r0, 0x36	; 54
    117a:	07 fe       	sbrs	r0, 7
    117c:	fd cf       	rjmp	.-6      	; 0x1178 <I2C_masterStart+0x6>
	while( (Ru8_TWSR & 0xF8) != MASTER_START);           /* 3 - Check status register that start condition has been sent  */
    117e:	81 b1       	in	r24, 0x01	; 1
    1180:	88 7f       	andi	r24, 0xF8	; 248
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	e1 f7       	brne	.-8      	; 0x117e <I2C_masterStart+0xc>
}                                                    /*****************************************************************/
    1186:	08 95       	ret

00001188 <I2C_repeatedStart>:
                                                                                                                       ////////
void I2C_repeatedStart(void){                                                                                          ////////
	                                                /*************************************************************************/
	Ru8_TWCR= (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);/* 1 - Reset I2C interrupt flag, send start condition, enable I2C        */
    1188:	84 ea       	ldi	r24, 0xA4	; 164
    118a:	86 bf       	out	0x36, r24	; 54
	while(!(Ru8_TWCR & (1 << TWINT)));                  /* 2 - Stay here until start condition has been transmitted              */
    118c:	06 b6       	in	r0, 0x36	; 54
    118e:	07 fe       	sbrs	r0, 7
    1190:	fd cf       	rjmp	.-6      	; 0x118c <I2C_repeatedStart+0x4>
	while( (Ru8_TWSR & 0xF8) != MASTER_REPEATED_START); /* 3 - Check status register that repeated start condition has been sent */
    1192:	81 b1       	in	r24, 0x01	; 1
    1194:	88 7f       	andi	r24, 0xF8	; 248
    1196:	80 31       	cpi	r24, 0x10	; 16
    1198:	e1 f7       	brne	.-8      	; 0x1192 <I2C_repeatedStart+0xa>
}                                                   /*************************************************************************//////////////////////////////
    119a:	08 95       	ret

0000119c <I2C_masterWriteToAddress>:
                                                                                                                              //////////////////////////////
void I2C_masterWriteToAddress(uint8_t u8_slaveAddress){                                                                       //////////////////////////////                                     /********************************************************************************************/
    119c:	cf 93       	push	r28
    119e:	c8 2f       	mov	r28, r24
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address and LSB is set to 0 for writing operation */
    11a0:	88 0f       	add	r24, r24
    11a2:	83 b9       	out	0x03, r24	; 3
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                        /* 2 - Reset I2C interrupt flag and enable I2C operation                                    */
    11a4:	84 e8       	ldi	r24, 0x84	; 132
    11a6:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 3 - Stay here until slave address has been transmitted                                   */
    11a8:	06 b6       	in	r0, 0x36	; 54
    11aa:	07 fe       	sbrs	r0, 7
    11ac:	fd cf       	rjmp	.-6      	; 0x11a8 <I2C_masterWriteToAddress+0xc>
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <I2C_masterWriteToAddress+0x1e>
	while ((Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_WRITE_TRANSMITTED)// && (Ru8_TWSR & 0xF8) != 0x20 );/* 4 - Check in status register that address has been transmitted and slave has acknowledged*/
    {

		I2C_repeatedStart();
    11b0:	0e 94 c4 08 	call	0x1188	; 0x1188 <I2C_repeatedStart>
		I2C_masterWriteToAddress(u8_slaveAddress);
    11b4:	8c 2f       	mov	r24, r28
    11b6:	0e 94 ce 08 	call	0x119c	; 0x119c <I2C_masterWriteToAddress>
                                                                                                                              //////////////////////////////
void I2C_masterWriteToAddress(uint8_t u8_slaveAddress){                                                                       //////////////////////////////                                     /********************************************************************************************/
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address and LSB is set to 0 for writing operation */
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                        /* 2 - Reset I2C interrupt flag and enable I2C operation                                    */
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 3 - Stay here until slave address has been transmitted                                   */
	while ((Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_WRITE_TRANSMITTED)// && (Ru8_TWSR & 0xF8) != 0x20 );/* 4 - Check in status register that address has been transmitted and slave has acknowledged*/
    11ba:	81 b1       	in	r24, 0x01	; 1
    11bc:	88 7f       	andi	r24, 0xF8	; 248
    11be:	88 31       	cpi	r24, 0x18	; 24
    11c0:	b9 f7       	brne	.-18     	; 0x11b0 <I2C_masterWriteToAddress+0x14>
    {

		I2C_repeatedStart();
		I2C_masterWriteToAddress(u8_slaveAddress);
	}
}                                                             /********************************************************************************************/
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <I2C_masterReadFromAddress>:
                                                                                                                                                         ///
void I2C_masterReadFromAddress(uint8_t u8_slaveAddress){                                                                                                 ///                                                      /******************************************************************************************///
    11c6:	cf 93       	push	r28
    11c8:	c8 2f       	mov	r28, r24
	
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address                                         *///
    11ca:	88 0f       	add	r24, r24
    11cc:	83 b9       	out	0x03, r24	; 3
	Ru8_TWDR |= (1 << 0);                                          /* 2 - Set LSB in TWD_R to 1 for reading operation                                        *///
    11ce:	83 b1       	in	r24, 0x03	; 3
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	83 b9       	out	0x03, r24	; 3
	Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);                        /* 3 - Reset I2C interrupt flag and enable I2C operation                                  *///
    11d4:	86 b7       	in	r24, 0x36	; 54
    11d6:	84 68       	ori	r24, 0x84	; 132
    11d8:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 4 - Stay here until slave address to read from has been transmitted                    *///
    11da:	06 b6       	in	r0, 0x36	; 54
    11dc:	07 fe       	sbrs	r0, 7
    11de:	fd cf       	rjmp	.-6      	; 0x11da <I2C_masterReadFromAddress+0x14>
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <I2C_masterReadFromAddress+0x26>
	while ( (Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_READ_TRANSMITTED) /* 5 - Check in status register that the address of slave to read has been transmitted    *///
    {
		I2C_repeatedStart();
    11e2:	0e 94 c4 08 	call	0x1188	; 0x1188 <I2C_repeatedStart>
		I2C_masterReadFromAddress(u8_slaveAddress);
    11e6:	8c 2f       	mov	r24, r28
    11e8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <I2C_masterReadFromAddress>
	
	Ru8_TWDR = (u8_slaveAddress << 1);                            /* 1 - Higher 7 - bits to represent slave address                                         *///
	Ru8_TWDR |= (1 << 0);                                          /* 2 - Set LSB in TWD_R to 1 for reading operation                                        *///
	Ru8_TWCR |= (1 << TWINT) | (1 << TWEN);                        /* 3 - Reset I2C interrupt flag and enable I2C operation                                  *///
	while (!(Ru8_TWCR & (1 << TWINT)));                           /* 4 - Stay here until slave address to read from has been transmitted                    *///
	while ( (Ru8_TWSR & 0xF8) != SLAVE_ADDRESS_READ_TRANSMITTED) /* 5 - Check in status register that the address of slave to read has been transmitted    *///
    11ec:	81 b1       	in	r24, 0x01	; 1
    11ee:	88 7f       	andi	r24, 0xF8	; 248
    11f0:	80 34       	cpi	r24, 0x40	; 64
    11f2:	b9 f7       	brne	.-18     	; 0x11e2 <I2C_masterReadFromAddress+0x1c>
    {
		I2C_repeatedStart();
		I2C_masterReadFromAddress(u8_slaveAddress);
	}
}                                                             /******************************************************************************************///
    11f4:	cf 91       	pop	r28
    11f6:	08 95       	ret

000011f8 <I2C_masterWriteData>:
                                                                                                                                           /////////////////
void I2C_masterWriteData(uint8_t u8_data){                                                                                                 /////////////////
	                                                         /*****************************************************************************/
	Ru8_TWDR = u8_data;                                          /* 1 - Load data to be transmitted                                           */
    11f8:	83 b9       	out	0x03, r24	; 3
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                       /* 2 - Reset I2C interrupt flag and enable I2C operation                     */
    11fa:	84 e8       	ldi	r24, 0x84	; 132
    11fc:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                          /* 3 - Stay here until data is transmitted from master                       */
    11fe:	06 b6       	in	r0, 0x36	; 54
    1200:	07 fe       	sbrs	r0, 7
    1202:	fd cf       	rjmp	.-6      	; 0x11fe <I2C_masterWriteData+0x6>
	while ( (Ru8_TWSR & 0xF8) != MASTER_WRITE_DATA_TRANSMITTED);//&& (Ru8_TWSR & 0xF8) != 0x30 ); /* 4 - Check in status register that data has been transmitted               */
    1204:	81 b1       	in	r24, 0x01	; 1
    1206:	88 7f       	andi	r24, 0xF8	; 248
    1208:	88 32       	cpi	r24, 0x28	; 40
    120a:	e1 f7       	brne	.-8      	; 0x1204 <I2C_masterWriteData+0xc>
}                                                            /*****************************************************************************/
    120c:	08 95       	ret

0000120e <I2C_masterReadData>:
                                                                                                                                          //
uint8_t I2C_masterReadData(void){                                                                                                         //
	
                                                               /*******************************************************************************/
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);       /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
    120e:	84 ec       	ldi	r24, 0xC4	; 196
    1210:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
    1212:	06 b6       	in	r0, 0x36	; 54
    1214:	07 fe       	sbrs	r0, 7
    1216:	fd cf       	rjmp	.-6      	; 0x1212 <I2C_masterReadData+0x4>
	while ( (Ru8_TWSR & 0xF8) != MASTER_READ_DATA_ACK);        /* 3 - Check that data has been transmitted to master                          */
    1218:	81 b1       	in	r24, 0x01	; 1
    121a:	88 7f       	andi	r24, 0xF8	; 248
    121c:	80 35       	cpi	r24, 0x50	; 80
    121e:	e1 f7       	brne	.-8      	; 0x1218 <I2C_masterReadData+0xa>
	return Ru8_TWDR;                                           /* 4 - Return transmitted data                                                 */
    1220:	83 b1       	in	r24, 0x03	; 3
}                                                              /*******************************************************************************/
    1222:	08 95       	ret

00001224 <I2C_masterReadFinalData>:

uint8_t I2C_masterReadFinalData(void){                                                                                                         //
	
	                                                           /*******************************************************************************/
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN);                     /* 1 - Reset I2C interrupt flag and enable I2C operation                       */
    1224:	84 e8       	ldi	r24, 0x84	; 132
    1226:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR & (1 << TWINT)));                        /* 2 - Stay here until data is received by master                              */
    1228:	06 b6       	in	r0, 0x36	; 54
    122a:	07 fe       	sbrs	r0, 7
    122c:	fd cf       	rjmp	.-6      	; 0x1228 <I2C_masterReadFinalData+0x4>
	while ( (Ru8_TWSR & 0xF8) != MASTER_READ_DATA_NACK);       /* 3 - Check that data has been transmitted to master                          */
    122e:	81 b1       	in	r24, 0x01	; 1
    1230:	88 7f       	andi	r24, 0xF8	; 248
    1232:	88 35       	cpi	r24, 0x58	; 88
    1234:	e1 f7       	brne	.-8      	; 0x122e <I2C_masterReadFinalData+0xa>
	return Ru8_TWDR;                                           /* 4 - Return transmitted data                                                 */
    1236:	83 b1       	in	r24, 0x03	; 3
}
    1238:	08 95       	ret

0000123a <I2C_masterStop>:
                                                                                                                                          //
void I2C_masterStop(void){                                                                                                                //
	                                                  /************************************************************************************/
	Ru8_TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); /* 1 - Reset I2C interrupt flag, enable I2C operation and transmit a stop condition */
    123a:	84 e9       	ldi	r24, 0x94	; 148
    123c:	86 bf       	out	0x36, r24	; 54
	while (!(Ru8_TWCR != (1 << TWSTO))); /* 2 - Stay here until stop condition is successfully transmitted                   */
    123e:	86 b7       	in	r24, 0x36	; 54
    1240:	80 31       	cpi	r24, 0x10	; 16
    1242:	e9 f3       	breq	.-6      	; 0x123e <I2C_masterStop+0x4>
}                                                     /************************************************************************************/
    1244:	08 95       	ret

00001246 <SPI_init>:
	    #else
	        #error "Invalid Data Sampling Setting"
	    #endif
	
	#elif SPI_MODE == SLAVE_MODE
	    DIO_SetPinDirection(PORTB,MISO,OUTPUT);
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	66 e0       	ldi	r22, 0x06	; 6
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_SetPinDirection>
	    SPC_R |= (1 << SPE);
    1250:	8d b1       	in	r24, 0x0d	; 13
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	8d b9       	out	0x0d, r24	; 13
	
	#if SPI_INTERRUPT == ENABLE
		SPC_R    |= (1 << SPIE);
		STATUS_R |= (1 << GLOBAL_INTERRUPT);
	#elif SPI_INTERRUPT == DISABLE
	    SPC_R    &=	~(1 << SPIE);
    1256:	8d b1       	in	r24, 0x0d	; 13
    1258:	8f 77       	andi	r24, 0x7F	; 127
    125a:	8d b9       	out	0x0d, r24	; 13
		STATUS_R &= ~(1 << GLOBAL_INTERRUPT);
    125c:	8f b7       	in	r24, 0x3f	; 63
    125e:	8f 77       	andi	r24, 0x7F	; 127
    1260:	8f bf       	out	0x3f, r24	; 63
	#else 
	    #error "Invalid Interrupt Setting"
	#endif
	
	#if DATA_ORDER == MSB_FIRST
	    SPC_R &= ~(1 << DORD);
    1262:	8d b1       	in	r24, 0x0d	; 13
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	8d b9       	out	0x0d, r24	; 13
    1268:	08 95       	ret

0000126a <SPI_tranceiver>:
	#endif
}

uint8_t SPI_tranceiver(uint8_t u8_data){

	SPD_R = u8_data;
    126a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPS_R & (1 << SPIF)));
    126c:	77 9b       	sbis	0x0e, 7	; 14
    126e:	fe cf       	rjmp	.-4      	; 0x126c <SPI_tranceiver+0x2>
	return SPD_R;
    1270:	8f b1       	in	r24, 0x0f	; 15
}
    1272:	08 95       	ret

00001274 <SPI_slaveReceiveString>:

void SPI_slaveReceiveString(uint8_t* u8_buffer, uint8_t u8_buffSize)
{
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	8c 01       	movw	r16, r24
    1282:	d6 2f       	mov	r29, r22
	uint8_t u8_dummy, u8_buffIndex = 0;
    1284:	c0 e0       	ldi	r28, 0x00	; 0
	
	do{
		u8_buffer[u8_buffIndex] = SPI_tranceiver(u8_dummy);
    1286:	78 01       	movw	r14, r16
    1288:	ec 0e       	add	r14, r28
    128a:	f1 1c       	adc	r15, r1
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 35 09 	call	0x126a	; 0x126a <SPI_tranceiver>
    1292:	f7 01       	movw	r30, r14
    1294:	80 83       	st	Z, r24
		u8_buffIndex++;
    1296:	cf 5f       	subi	r28, 0xFF	; 255
	}while(u8_buffer[u8_buffIndex - 1] != '\0' && (u8_buffIndex < u8_buffSize));
    1298:	f8 01       	movw	r30, r16
    129a:	ec 0f       	add	r30, r28
    129c:	f1 1d       	adc	r31, r1
    129e:	31 97       	sbiw	r30, 0x01	; 1
    12a0:	80 81       	ld	r24, Z
    12a2:	88 23       	and	r24, r24
    12a4:	11 f0       	breq	.+4      	; 0x12aa <SPI_slaveReceiveString+0x36>
    12a6:	cd 17       	cp	r28, r29
    12a8:	70 f3       	brcs	.-36     	; 0x1286 <SPI_slaveReceiveString+0x12>
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <__vector_11>:
}

void OCI2_init(void)
{
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <counts>
    12ce:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <counts+0x1>
    12d2:	a0 91 f4 02 	lds	r26, 0x02F4	; 0x8002f4 <counts+0x2>
    12d6:	b0 91 f5 02 	lds	r27, 0x02F5	; 0x8002f5 <counts+0x3>
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	a1 1d       	adc	r26, r1
    12de:	b1 1d       	adc	r27, r1
    12e0:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <counts>
    12e4:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <counts+0x1>
    12e8:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <counts+0x2>
    12ec:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <counts+0x3>
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <OVI0_init>:
    1302:	89 b7       	in	r24, 0x39	; 57
    1304:	81 60       	ori	r24, 0x01	; 1
    1306:	89 bf       	out	0x39, r24	; 57
    1308:	8f b7       	in	r24, 0x3f	; 63
    130a:	80 68       	ori	r24, 0x80	; 128
    130c:	8f bf       	out	0x3f, r24	; 63
    130e:	08 95       	ret

00001310 <TIMER0_start>:
	counts = 0; 
}

void TIMER0_start(uint16_t u16_prescale)
{
	if (1 == u16_prescale)
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	21 f4       	brne	.+8      	; 0x131e <TIMER0_start+0xe>
	{
		Ru8_TCCR0 |= (1<<CS00);
    1316:	83 b7       	in	r24, 0x33	; 51
    1318:	81 60       	ori	r24, 0x01	; 1
    131a:	83 bf       	out	0x33, r24	; 51
    131c:	08 95       	ret
	}
	else if (8 == u16_prescale)
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	91 05       	cpc	r25, r1
    1322:	21 f4       	brne	.+8      	; 0x132c <TIMER0_start+0x1c>
	{
		Ru8_TCCR0 |= (1<<CS01);	
    1324:	83 b7       	in	r24, 0x33	; 51
    1326:	82 60       	ori	r24, 0x02	; 2
    1328:	83 bf       	out	0x33, r24	; 51
    132a:	08 95       	ret
	}
	else if (32 == u16_prescale)
    132c:	80 32       	cpi	r24, 0x20	; 32
    132e:	91 05       	cpc	r25, r1
    1330:	21 f4       	brne	.+8      	; 0x133a <TIMER0_start+0x2a>
	{
		Ru8_TCCR0 |= (1<<CS01) | (1<<CS00);
    1332:	83 b7       	in	r24, 0x33	; 51
    1334:	83 60       	ori	r24, 0x03	; 3
    1336:	83 bf       	out	0x33, r24	; 51
    1338:	08 95       	ret
	}
	else if (64 == u16_prescale)
    133a:	80 34       	cpi	r24, 0x40	; 64
    133c:	91 05       	cpc	r25, r1
    133e:	21 f4       	brne	.+8      	; 0x1348 <TIMER0_start+0x38>
	{
		Ru8_TCCR0 |= (1<<CS02);
    1340:	83 b7       	in	r24, 0x33	; 51
    1342:	84 60       	ori	r24, 0x04	; 4
    1344:	83 bf       	out	0x33, r24	; 51
    1346:	08 95       	ret
	}
	else if (128 == u16_prescale)
    1348:	80 38       	cpi	r24, 0x80	; 128
    134a:	91 05       	cpc	r25, r1
    134c:	21 f4       	brne	.+8      	; 0x1356 <TIMER0_start+0x46>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS00);
    134e:	83 b7       	in	r24, 0x33	; 51
    1350:	85 60       	ori	r24, 0x05	; 5
    1352:	83 bf       	out	0x33, r24	; 51
    1354:	08 95       	ret
	}
	else if (256 == u16_prescale)
    1356:	81 15       	cp	r24, r1
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	92 07       	cpc	r25, r18
    135c:	21 f4       	brne	.+8      	; 0x1366 <TIMER0_start+0x56>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01);
    135e:	83 b7       	in	r24, 0x33	; 51
    1360:	86 60       	ori	r24, 0x06	; 6
    1362:	83 bf       	out	0x33, r24	; 51
    1364:	08 95       	ret
	}
	else if (1024 == u16_prescale)
    1366:	81 15       	cp	r24, r1
    1368:	94 40       	sbci	r25, 0x04	; 4
    136a:	19 f4       	brne	.+6      	; 0x1372 <TIMER0_start+0x62>
	{
		Ru8_TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);
    136c:	83 b7       	in	r24, 0x33	; 51
    136e:	87 60       	ori	r24, 0x07	; 7
    1370:	83 bf       	out	0x33, r24	; 51
    1372:	08 95       	ret

00001374 <TIMER0_stop>:
	}
}

void TIMER0_stop(void)
{
	Ru8_TCCR0 = 0;
    1374:	13 be       	out	0x33, r1	; 51
    1376:	08 95       	ret

00001378 <TIMER0_msdelay>:
	SET_BIT(Ru8_TIMSK,7);
	SET_BIT(Ru8_SREG,7);
}

void TIMER0_msdelay(uint16_t mseconds)
{	
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	00 d0       	rcall	.+0      	; 0x1386 <TIMER0_msdelay+0xe>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <TIMER0_msdelay+0x10>
    1388:	00 d0       	rcall	.+0      	; 0x138a <TIMER0_msdelay+0x12>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;
	volatile uint16_t remainder;
	ticks     = ( ( mseconds / 0.001 ) / 255 );
    138e:	bc 01       	movw	r22, r24
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatunsisf>
    1398:	2f e6       	ldi	r18, 0x6F	; 111
    139a:	32 e1       	ldi	r19, 0x12	; 18
    139c:	43 e8       	ldi	r20, 0x83	; 131
    139e:	5a e3       	ldi	r21, 0x3A	; 58
    13a0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
    13a4:	6b 01       	movw	r12, r22
    13a6:	7c 01       	movw	r14, r24
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4f e7       	ldi	r20, 0x7F	; 127
    13ae:	53 e4       	ldi	r21, 0x43	; 67
    13b0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
    13b4:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fixunssfsi>
    13b8:	69 83       	std	Y+1, r22	; 0x01
    13ba:	7a 83       	std	Y+2, r23	; 0x02
    13bc:	8b 83       	std	Y+3, r24	; 0x03
    13be:	9c 83       	std	Y+4, r25	; 0x04
	remainder = ((mseconds / 0.001) - ( ticks * 255 ));  //Calculating the remaining fraction of clock cycles
    13c0:	29 81       	ldd	r18, Y+1	; 0x01
    13c2:	3a 81       	ldd	r19, Y+2	; 0x02
    13c4:	4b 81       	ldd	r20, Y+3	; 0x03
    13c6:	5c 81       	ldd	r21, Y+4	; 0x04
    13c8:	af ef       	ldi	r26, 0xFF	; 255
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	0e 94 ae 11 	call	0x235c	; 0x235c <__muluhisi3>
    13d0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatunsisf>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__subsf3>
    13e0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fixunssfsi>
    13e4:	7e 83       	std	Y+6, r23	; 0x06
    13e6:	6d 83       	std	Y+5, r22	; 0x05
	OVI0_init();                                         //Enabling system interrupt and flag for overflow int timer 0
    13e8:	0e 94 81 09 	call	0x1302	; 0x1302 <OVI0_init>
	TIMER0_start(8);                                     //Prescaler of one that yields 8MHz frequency
    13ec:	88 e0       	ldi	r24, 0x08	; 8
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 88 09 	call	0x1310	; 0x1310 <TIMER0_start>
	while (counts < ticks)
    13f4:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <counts>
    13f8:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <counts+0x1>
    13fc:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <counts+0x2>
    1400:	70 91 f5 02 	lds	r23, 0x02F5	; 0x8002f5 <counts+0x3>
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	ab 81       	ldd	r26, Y+3	; 0x03
    140a:	bc 81       	ldd	r27, Y+4	; 0x04
    140c:	48 17       	cp	r20, r24
    140e:	59 07       	cpc	r21, r25
    1410:	6a 07       	cpc	r22, r26
    1412:	7b 07       	cpc	r23, r27
    1414:	78 f3       	brcs	.-34     	; 0x13f4 <TIMER0_msdelay+0x7c>
	{
		//Stay here till reaching the overflow counts that corresponds to the required delay
	}
	Ru8_TCNT0 = (255-remainder);                      //Compensation of ticks remaining fraction to increase accuracy
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	80 95       	com	r24
    141c:	82 bf       	out	0x32, r24	; 50
	TIMER0_stop();
    141e:	0e 94 ba 09 	call	0x1374	; 0x1374 <TIMER0_stop>
	counts = 0; 
    1422:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <counts>
    1426:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <counts+0x1>
    142a:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <counts+0x2>
    142e:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <counts+0x3>
}
    1432:	26 96       	adiw	r28, 0x06	; 6
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret

0000144c <USART_voidInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void USART_TX_Int_CallBack_fun(void (*ptr_To_Fun)(void))
{
	ptr_To_TX_Int_fun=ptr_To_Fun;
    144c:	fc 01       	movw	r30, r24
    144e:	80 81       	ld	r24, Z
    1450:	81 11       	cpse	r24, r1
    1452:	0a c0       	rjmp	.+20     	; 0x1468 <USART_voidInit+0x1c>
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	91 11       	cpse	r25, r1
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <USART_voidInit+0x1c>
    145a:	83 e3       	ldi	r24, 0x33	; 51
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <MYUBRR+0x1>
    1462:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <MYUBRR>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <USART_voidInit+0x44>
    1468:	81 11       	cpse	r24, r1
    146a:	0a c0       	rjmp	.+20     	; 0x1480 <USART_voidInit+0x34>
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	91 30       	cpi	r25, 0x01	; 1
    1470:	39 f4       	brne	.+14     	; 0x1480 <USART_voidInit+0x34>
    1472:	87 e6       	ldi	r24, 0x67	; 103
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <MYUBRR+0x1>
    147a:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <MYUBRR>
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <USART_voidInit+0x44>
    1480:	80 34       	cpi	r24, 0x40	; 64
    1482:	31 f4       	brne	.+12     	; 0x1490 <USART_voidInit+0x44>
    1484:	8f e9       	ldi	r24, 0x9F	; 159
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <MYUBRR+0x1>
    148c:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <MYUBRR>
    1490:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <MYUBRR>
    1494:	89 b9       	out	0x09, r24	; 9
    1496:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <MYUBRR+0x1>
    149a:	80 bd       	out	0x20, r24	; 32
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	21 f4       	brne	.+8      	; 0x14aa <USART_voidInit+0x5e>
    14a2:	8a b1       	in	r24, 0x0a	; 10
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8a b9       	out	0x0a, r24	; 10
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <USART_voidInit+0x68>
    14aa:	81 11       	cpse	r24, r1
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <USART_voidInit+0x68>
    14ae:	8a b1       	in	r24, 0x0a	; 10
    14b0:	87 7f       	andi	r24, 0xF7	; 247
    14b2:	8a b9       	out	0x0a, r24	; 10
    14b4:	83 81       	ldd	r24, Z+3	; 0x03
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <USART_voidInit+0x76>
    14ba:	8a b1       	in	r24, 0x0a	; 10
    14bc:	80 61       	ori	r24, 0x10	; 16
    14be:	8a b9       	out	0x0a, r24	; 10
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <USART_voidInit+0x82>
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	81 11       	cpse	r24, r1
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <USART_voidInit+0x82>
    14c8:	8a b1       	in	r24, 0x0a	; 10
    14ca:	8f 7e       	andi	r24, 0xEF	; 239
    14cc:	8a b9       	out	0x0a, r24	; 10
    14ce:	84 81       	ldd	r24, Z+4	; 0x04
    14d0:	86 30       	cpi	r24, 0x06	; 6
    14d2:	21 f4       	brne	.+8      	; 0x14dc <USART_voidInit+0x90>
    14d4:	80 b5       	in	r24, 0x20	; 32
    14d6:	86 68       	ori	r24, 0x86	; 134
    14d8:	80 bd       	out	0x20, r24	; 32
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <USART_voidInit+0x9a>
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	19 f4       	brne	.+6      	; 0x14e6 <USART_voidInit+0x9a>
    14e0:	80 b5       	in	r24, 0x20	; 32
    14e2:	86 60       	ori	r24, 0x06	; 6
    14e4:	80 bd       	out	0x20, r24	; 32
    14e6:	81 85       	ldd	r24, Z+9	; 0x09
    14e8:	80 38       	cpi	r24, 0x80	; 128
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <USART_voidInit+0xa8>
    14ec:	8a b1       	in	r24, 0x0a	; 10
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	8a b9       	out	0x0a, r24	; 10
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <USART_voidInit+0xb2>
    14f4:	81 11       	cpse	r24, r1
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <USART_voidInit+0xb2>
    14f8:	8a b1       	in	r24, 0x0a	; 10
    14fa:	8f 77       	andi	r24, 0x7F	; 127
    14fc:	8a b9       	out	0x0a, r24	; 10
    14fe:	80 85       	ldd	r24, Z+8	; 0x08
    1500:	80 34       	cpi	r24, 0x40	; 64
    1502:	21 f4       	brne	.+8      	; 0x150c <USART_voidInit+0xc0>
    1504:	8a b1       	in	r24, 0x0a	; 10
    1506:	80 64       	ori	r24, 0x40	; 64
    1508:	8a b9       	out	0x0a, r24	; 10
    150a:	08 95       	ret
    150c:	81 11       	cpse	r24, r1
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <USART_voidInit+0xca>
    1510:	8a b1       	in	r24, 0x0a	; 10
    1512:	8f 7b       	andi	r24, 0xBF	; 191
    1514:	8a b9       	out	0x0a, r24	; 10
    1516:	08 95       	ret

00001518 <USART_voidTransmit>:
    1518:	5d 9b       	sbis	0x0b, 5	; 11
    151a:	fe cf       	rjmp	.-4      	; 0x1518 <USART_voidTransmit>
    151c:	8c b9       	out	0x0c, r24	; 12
    151e:	08 95       	ret

00001520 <USART_u8Receive>:
    1520:	5f 9b       	sbis	0x0b, 7	; 11
    1522:	fe cf       	rjmp	.-4      	; 0x1520 <USART_u8Receive>
    1524:	8c b1       	in	r24, 0x0c	; 12
    1526:	08 95       	ret

00001528 <USART_voidRecievePacket>:
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	8c 01       	movw	r16, r24
    1538:	d6 2e       	mov	r13, r22
    153a:	d4 2f       	mov	r29, r20
    153c:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_u8Receive>
    1540:	f8 01       	movw	r30, r16
    1542:	80 83       	st	Z, r24
    1544:	c0 e0       	ldi	r28, 0x00	; 0
    1546:	08 c0       	rjmp	.+16     	; 0x1558 <USART_voidRecievePacket+0x30>
    1548:	cf 5f       	subi	r28, 0xFF	; 255
    154a:	78 01       	movw	r14, r16
    154c:	ec 0e       	add	r14, r28
    154e:	f1 1c       	adc	r15, r1
    1550:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_u8Receive>
    1554:	f7 01       	movw	r30, r14
    1556:	80 83       	st	Z, r24
    1558:	f8 01       	movw	r30, r16
    155a:	ec 0f       	add	r30, r28
    155c:	f1 1d       	adc	r31, r1
    155e:	80 81       	ld	r24, Z
    1560:	8d 17       	cp	r24, r29
    1562:	41 f0       	breq	.+16     	; 0x1574 <USART_voidRecievePacket+0x4c>
    1564:	2c 2f       	mov	r18, r28
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8d 2d       	mov	r24, r13
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	28 17       	cp	r18, r24
    1570:	39 07       	cpc	r19, r25
    1572:	54 f3       	brlt	.-44     	; 0x1548 <USART_voidRecievePacket+0x20>
    1574:	10 82       	st	Z, r1
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	08 95       	ret

00001586 <USART_voidSendString>:
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	76 01       	movw	r14, r12
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <USART_voidSendString+0x24>
    159c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <USART_voidTransmit>
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	c8 1a       	sub	r12, r24
    15a4:	d8 0a       	sbc	r13, r24
    15a6:	e8 0a       	sbc	r14, r24
    15a8:	f8 0a       	sbc	r15, r24
    15aa:	fe 01       	movw	r30, r28
    15ac:	ec 0d       	add	r30, r12
    15ae:	fd 1d       	adc	r31, r13
    15b0:	80 81       	ld	r24, Z
    15b2:	81 11       	cpse	r24, r1
    15b4:	f3 cf       	rjmp	.-26     	; 0x159c <USART_voidSendString+0x16>
    15b6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <USART_voidTransmit>
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	08 95       	ret

000015c8 <__vector_13>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*RX ISR*/
void __vector_13(void)
{
	ptr_To_RX_Int_fun();
    15c8:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <ptr_To_RX_Int_fun>
    15cc:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <ptr_To_RX_Int_fun+0x1>
    15d0:	09 95       	icall
    15d2:	08 95       	ret

000015d4 <__vector_15>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*TX ISR*/
void __vector_15(void)
{
	ptr_To_TX_Int_fun();
    15d4:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <ptr_To_TX_Int_fun>
    15d8:	f0 91 fb 02 	lds	r31, 0x02FB	; 0x8002fb <ptr_To_TX_Int_fun+0x1>
    15dc:	09 95       	icall
    15de:	08 95       	ret

000015e0 <TERMINAL_init>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TERMINAL_init(void)
{
	USART_voidInit(&gstr_USART_Config);
    15e0:	80 e6       	ldi	r24, 0x60	; 96
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 26 0a 	call	0x144c	; 0x144c <USART_voidInit>
    15e8:	08 95       	ret

000015ea <ATM_Init>:
extern struct gstr_USART_Config_t gstr_USART_Config;


void ATM_Init(void)
{
	Ru8_DDRD |= 0x80;
    15ea:	81 b3       	in	r24, 0x11	; 17
    15ec:	80 68       	ori	r24, 0x80	; 128
    15ee:	81 bb       	out	0x11, r24	; 17
	EEPROM_voidInit();
    15f0:	0e 94 57 02 	call	0x4ae	; 0x4ae <EEPROM_voidInit>
	LM35_voidInit();
    15f4:	0e 94 15 06 	call	0xc2a	; 0xc2a <LM35_voidInit>
	Keyad_VoidINit();
    15f8:	0e 94 a1 03 	call	0x742	; 0x742 <Keyad_VoidINit>
	LCD_init();
    15fc:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_init>
	TERMINAL_init();
    1600:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <TERMINAL_init>
	BUZZER_en();
    1604:	0e 94 45 02 	call	0x48a	; 0x48a <BUZZER_en>
	SPI_init();
    1608:	0e 94 23 09 	call	0x1246	; 0x1246 <SPI_init>
    160c:	08 95       	ret

0000160e <TERMINAL_display>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TERMINAL_display(uint8_t* u8_stream)
{
	if (u8_stream != NULL_POINTER)
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	11 f0       	breq	.+4      	; 0x1616 <TERMINAL_display+0x8>
	{
		USART_voidSendString(u8_stream);
    1612:	0e 94 c3 0a 	call	0x1586	; 0x1586 <USART_voidSendString>
    1616:	08 95       	ret

00001618 <TERMINAL_command>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TERMINAL_command(uint8_t* u8_buffer, uint8_t u8_arrSize)
{
	USART_voidRecievePacket(u8_buffer, u8_arrSize, '\r');
    1618:	4d e0       	ldi	r20, 0x0D	; 13
    161a:	0e 94 94 0a 	call	0x1528	; 0x1528 <USART_voidRecievePacket>
    161e:	08 95       	ret

00001620 <ACCESS_grant>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ACCESS_grant(void)
{
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	00 d0       	rcall	.+0      	; 0x162a <ACCESS_grant+0xa>
    162a:	00 d0       	rcall	.+0      	; 0x162c <ACCESS_grant+0xc>
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_passCorrect = ATM_FALSE;
	uint8_t u8_trials      = u8_INTIAL_VAL;
    1632:	10 e0       	ldi	r17, 0x00	; 0
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ACCESS_grant(void)
{
	uint8_t u8_passCorrect = ATM_FALSE;
    1634:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t u8_trials      = u8_INTIAL_VAL;
	uint8_t pu8_adminPass[u8_ADMIN_PASS_SIZE];
	
	while(!u8_passCorrect && (u8_trials < u8_MAX_TRIALS))
    1636:	18 c0       	rjmp	.+48     	; 0x1668 <ACCESS_grant+0x48>
	{
		u8_trials++;
    1638:	1f 5f       	subi	r17, 0xFF	; 255
		TERMINAL_display(REQUIRE_PASS_STR);
    163a:	87 e3       	ldi	r24, 0x37	; 55
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
		TERMINAL_command(pu8_adminPass,u8_ADMIN_PASS_SIZE);
    1642:	65 e0       	ldi	r22, 0x05	; 5
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TERMINAL_command>
		
		if(strcmp(pu8_adminPass,ADMIN_PASS) == u8_EQUAL_STR)
    164c:	68 e4       	ldi	r22, 0x48	; 72
    164e:	72 e0       	ldi	r23, 0x02	; 2
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	0e 94 b9 11 	call	0x2372	; 0x2372 <strcmp>
    1658:	89 2b       	or	r24, r25
    165a:	29 f0       	breq	.+10     	; 0x1666 <ACCESS_grant+0x46>
		{
			u8_passCorrect = ATM_TRUE;
		}
		else
		{
			TERMINAL_display(WRONG_PASS_STR);
    165c:	8d e4       	ldi	r24, 0x4D	; 77
    165e:	92 e0       	ldi	r25, 0x02	; 2
    1660:	0e 94 07 0b 	call	0x160e	; 0x160e <TERMINAL_display>
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <ACCESS_grant+0x48>
		TERMINAL_display(REQUIRE_PASS_STR);
		TERMINAL_command(pu8_adminPass,u8_ADMIN_PASS_SIZE);
		
		if(strcmp(pu8_adminPass,ADMIN_PASS) == u8_EQUAL_STR)
		{
			u8_passCorrect = ATM_TRUE;
    1666:	01 e0       	ldi	r16, 0x01	; 1
{
	uint8_t u8_passCorrect = ATM_FALSE;
	uint8_t u8_trials      = u8_INTIAL_VAL;
	uint8_t pu8_adminPass[u8_ADMIN_PASS_SIZE];
	
	while(!u8_passCorrect && (u8_trials < u8_MAX_TRIALS))
    1668:	01 11       	cpse	r16, r1
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <ACCESS_grant+0x50>
    166c:	13 30       	cpi	r17, 0x03	; 3
    166e:	20 f3       	brcs	.-56     	; 0x1638 <ACCESS_grant+0x18>
		{
			TERMINAL_display(WRONG_PASS_STR);
		}
	}
	return u8_passCorrect;
}
    1670:	80 2f       	mov	r24, r16
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	08 95       	ret

00001686 <TERMINAL_u8getInput>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TERMINAL_u8getInput(uint8_t* pu8_inputBuff, uint8_t u8_maxBuffSize, uint8_t u8_minBuffSize)
{
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
    1690:	06 2f       	mov	r16, r22
    1692:	14 2f       	mov	r17, r20
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	uint8_t u8_inputValid = ATM_TRUE;
	TERMINAL_command(pu8_inputBuff, u8_maxBuffSize);
    1694:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TERMINAL_command>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TERMINAL_u8getInput(uint8_t* pu8_inputBuff, uint8_t u8_maxBuffSize, uint8_t u8_minBuffSize)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
    1698:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t u8_inputValid = ATM_TRUE;
	TERMINAL_command(pu8_inputBuff, u8_maxBuffSize);
	
	do
	{
		if((pu8_inputBuff[u8_indexArr] >= '0') && (pu8_inputBuff[u8_indexArr] <= '9'))
    169a:	fe 01       	movw	r30, r28
    169c:	e8 0f       	add	r30, r24
    169e:	f1 1d       	adc	r31, r1
    16a0:	90 81       	ld	r25, Z
    16a2:	90 53       	subi	r25, 0x30	; 48
    16a4:	9a 30       	cpi	r25, 0x0A	; 10
    16a6:	b0 f4       	brcc	.+44     	; 0x16d4 <TERMINAL_u8getInput+0x4e>
		{
			u8_indexArr++;
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
		else
		{
			u8_inputValid = ATM_FALSE;
			break;
		}
		if((pu8_inputBuff[u8_indexArr] == NULL_CHAR) && (u8_indexArr < u8_minBuffSize))
    16aa:	fe 01       	movw	r30, r28
    16ac:	e8 0f       	add	r30, r24
    16ae:	f1 1d       	adc	r31, r1
    16b0:	90 81       	ld	r25, Z
    16b2:	91 11       	cpse	r25, r1
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <TERMINAL_u8getInput+0x3e>
    16b6:	81 17       	cp	r24, r17
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <TERMINAL_u8getInput+0x3e>
		{
			TERMINAL_command(pu8_inputBuff, u8_maxBuffSize);
    16ba:	60 2f       	mov	r22, r16
    16bc:	ce 01       	movw	r24, r28
    16be:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TERMINAL_command>
			u8_indexArr = u8_INTIAL_VAL;
    16c2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}while(pu8_inputBuff[u8_indexArr] != NULL_CHAR);
    16c4:	fe 01       	movw	r30, r28
    16c6:	e8 0f       	add	r30, r24
    16c8:	f1 1d       	adc	r31, r1
    16ca:	90 81       	ld	r25, Z
    16cc:	91 11       	cpse	r25, r1
    16ce:	e5 cf       	rjmp	.-54     	; 0x169a <TERMINAL_u8getInput+0x14>
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TERMINAL_u8getInput(uint8_t* pu8_inputBuff, uint8_t u8_maxBuffSize, uint8_t u8_minBuffSize)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	uint8_t u8_inputValid = ATM_TRUE;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <TERMINAL_u8getInput+0x50>
		{
			u8_indexArr++;
		}
		else
		{
			u8_inputValid = ATM_FALSE;
    16d4:	80 e0       	ldi	r24, 0x00	; 0
			TERMINAL_command(pu8_inputBuff, u8_maxBuffSize);
			u8_indexArr = u8_INTIAL_VAL;
		}
	}while(pu8_inputBuff[u8_indexArr] != NULL_CHAR);
	return u8_inputValid ;
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <ATM_u8getArrCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8getArrCount(uint8_t* pu8_inputBuff)
{
    16e0:	9c 01       	movw	r18, r24
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
	while(pu8_inputBuff[u8_indexArr] != NULL_CHAR)
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <ATM_u8getArrCount+0x8>
	{
		++u8_indexArr ;
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8getArrCount(uint8_t* pu8_inputBuff)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	while(pu8_inputBuff[u8_indexArr] != NULL_CHAR)
    16e8:	f9 01       	movw	r30, r18
    16ea:	e8 0f       	add	r30, r24
    16ec:	f1 1d       	adc	r31, r1
    16ee:	90 81       	ld	r25, Z
    16f0:	91 11       	cpse	r25, r1
    16f2:	f9 cf       	rjmp	.-14     	; 0x16e6 <ATM_u8getArrCount+0x6>
	{
		++u8_indexArr ;
	}
	return u8_indexArr ;
}
    16f4:	08 95       	ret

000016f6 <ATM_voidstoreBalance>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
    16f6:	dc 01       	movw	r26, r24
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
	uint8_t u8_startingIndex = u8_BALANCE_MAX_SIZE - (u8_digitsCount + 1);
    16f8:	38 e0       	ldi	r19, 0x08	; 8
    16fa:	34 1b       	sub	r19, r20
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
    16fc:	20 e0       	ldi	r18, 0x00	; 0
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL;
    16fe:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
	uint8_t u8_startingIndex = u8_BALANCE_MAX_SIZE - (u8_digitsCount + 1);
	while(u8_indexArr < u8_BALANCE_MAX_SIZE)
    1700:	12 c0       	rjmp	.+36     	; 0x1726 <ATM_voidstoreBalance+0x30>
	{
		if(u8_indexArr < u8_startingIndex)
    1702:	93 17       	cp	r25, r19
    1704:	30 f4       	brcc	.+12     	; 0x1712 <ATM_voidstoreBalance+0x1c>
		{
			pu8_newRecBal[u8_indexArr] = '0';
    1706:	80 e3       	ldi	r24, 0x30	; 48
    1708:	fd 01       	movw	r30, r26
    170a:	e9 0f       	add	r30, r25
    170c:	f1 1d       	adc	r31, r1
    170e:	80 83       	st	Z, r24
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <ATM_voidstoreBalance+0x2e>
		}
		else
		{
			pu8_newRecBal[u8_indexArr] = pu8_tempRecBal[u8_indexArr2];
    1712:	fb 01       	movw	r30, r22
    1714:	e2 0f       	add	r30, r18
    1716:	f1 1d       	adc	r31, r1
    1718:	80 81       	ld	r24, Z
    171a:	fd 01       	movw	r30, r26
    171c:	e9 0f       	add	r30, r25
    171e:	f1 1d       	adc	r31, r1
    1720:	80 83       	st	Z, r24
			u8_indexArr2++;
    1722:	2f 5f       	subi	r18, 0xFF	; 255
		}
		u8_indexArr++;
    1724:	9f 5f       	subi	r25, 0xFF	; 255
void ATM_voidstoreBalance(uint8_t* pu8_newRecBal,uint8_t* pu8_tempRecBal,uint8_t u8_digitsCount)
{
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_indexArr2 = u8_INTIAL_VAL ;
	uint8_t u8_startingIndex = u8_BALANCE_MAX_SIZE - (u8_digitsCount + 1);
	while(u8_indexArr < u8_BALANCE_MAX_SIZE)
    1726:	99 30       	cpi	r25, 0x09	; 9
    1728:	60 f3       	brcs	.-40     	; 0x1702 <ATM_voidstoreBalance+0xc>
			pu8_newRecBal[u8_indexArr] = pu8_tempRecBal[u8_indexArr2];
			u8_indexArr2++;
		}
		u8_indexArr++;
	}
}
    172a:	08 95       	ret

0000172c <ATM_voidlcdUserInterface>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidlcdUserInterface(void)
{
	LCD_command(DISPLAY_CLEAR);
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	LCD_printString(LCD_INSERT_CARD_STR);
    1732:	8d e5       	ldi	r24, 0x5D	; 93
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	LCD_newLine();
    173a:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
	LCD_printString(LCD_SHOW_TEMP_OPTION_STR);
    173e:	8b e6       	ldi	r24, 0x6B	; 107
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	LCD_cursorMove(RIGHT, 2);
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	84 e1       	ldi	r24, 0x14	; 20
    174a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_cursorMove>
	LCD_printString(LCD_EXIT_OPTION_STR);
    174e:	82 e7       	ldi	r24, 0x72	; 114
    1750:	92 e0       	ldi	r25, 0x02	; 2
    1752:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
    1756:	08 95       	ret

00001758 <ATM_u8PinAccessGrant>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8PinAccessGrant(uint8_t* pu8_cardPin)
{
    1758:	cf 92       	push	r12
    175a:	df 92       	push	r13
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	7c 01       	movw	r14, r24
	uint8_t u8_pinValidity = ATM_TRUE ;
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	uint8_t u8_countWrongEnteredTimes = u8_INTIAL_VAL ;
    176a:	d1 2c       	mov	r13, r1
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8PinAccessGrant(uint8_t* pu8_cardPin)
{
	uint8_t u8_pinValidity = ATM_TRUE ;
	uint8_t u8_indexArr = u8_INTIAL_VAL;
    176c:	00 e0       	ldi	r16, 0x00	; 0
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8PinAccessGrant(uint8_t* pu8_cardPin)
{
	uint8_t u8_pinValidity = ATM_TRUE ;
    176e:	cc 24       	eor	r12, r12
    1770:	c3 94       	inc	r12
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	uint8_t u8_countWrongEnteredTimes = u8_INTIAL_VAL ;
	uint8_t pu8_atmPinBuffer[u8_PIN_SIZE] ;
	while((pu8_cardPin[u8_indexArr] != NULL_CHAR) && (u8_countWrongEnteredTimes < u8_MAX_ENTERED_PIN_TIMES))
    1772:	2e c0       	rjmp	.+92     	; 0x17d0 <ATM_u8PinAccessGrant+0x78>
	{
		u8_keyPadReturnASCII = KeyPad_U8Data();
    1774:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <KeyPad_U8Data>
    1778:	18 2f       	mov	r17, r24
		if(u8_keyPadReturnASCII!= u8_KEYPAD_NOT_PRESSED)
    177a:	84 31       	cpi	r24, 0x14	; 20
    177c:	49 f1       	breq	.+82     	; 0x17d0 <ATM_u8PinAccessGrant+0x78>
		{
			if(u8_keyPadReturnASCII<='9' && u8_keyPadReturnASCII>='0')
    177e:	80 ed       	ldi	r24, 0xD0	; 208
    1780:	81 0f       	add	r24, r17
    1782:	8a 30       	cpi	r24, 0x0A	; 10
    1784:	40 f4       	brcc	.+16     	; 0x1796 <ATM_u8PinAccessGrant+0x3e>
			{
				LCD_data('*') ;
    1786:	8a e2       	ldi	r24, 0x2A	; 42
    1788:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_data>
				pu8_atmPinBuffer[u8_indexArr] = u8_keyPadReturnASCII ;
				if(pu8_atmPinBuffer[u8_indexArr] !=  pu8_cardPin[u8_indexArr])
    178c:	88 81       	ld	r24, Y
    178e:	18 13       	cpse	r17, r24
				{
					u8_pinValidity = ATM_FALSE ;
    1790:	c1 2c       	mov	r12, r1
				}
				u8_indexArr++ ;
    1792:	0f 5f       	subi	r16, 0xFF	; 255
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <ATM_u8PinAccessGrant+0x40>
			}
			else
			{
				u8_pinValidity = ATM_FALSE ;
    1796:	c1 2c       	mov	r12, r1
			}

			if(u8_pinValidity== ATM_FALSE && u8_indexArr == (u8_PIN_SIZE - 1)) 
    1798:	c1 10       	cpse	r12, r1
    179a:	1a c0       	rjmp	.+52     	; 0x17d0 <ATM_u8PinAccessGrant+0x78>
    179c:	04 30       	cpi	r16, 0x04	; 4
    179e:	c1 f4       	brne	.+48     	; 0x17d0 <ATM_u8PinAccessGrant+0x78>
			{
				u8_pinValidity = ATM_TRUE ;
				LCD_command(DISPLAY_CLEAR) ;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
				LCD_printString(LCD_WRONG_PIN_STR);
    17a6:	89 e7       	ldi	r24, 0x79	; 121
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				TIMER0_msdelay(1000) ;
    17ae:	88 ee       	ldi	r24, 0xE8	; 232
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
				LCD_command(DISPLAY_CLEAR) ;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
				LCD_printString(LCD_REQUIRE_PIN_STR);
    17bc:	83 e2       	ldi	r24, 0x23	; 35
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				LCD_newLine();
    17c4:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
				u8_indexArr = u8_INTIAL_VAL ;
				u8_countWrongEnteredTimes++ ;
    17c8:	d3 94       	inc	r13
				LCD_printString(LCD_WRONG_PIN_STR);
				TIMER0_msdelay(1000) ;
				LCD_command(DISPLAY_CLEAR) ;
				LCD_printString(LCD_REQUIRE_PIN_STR);
				LCD_newLine();
				u8_indexArr = u8_INTIAL_VAL ;
    17ca:	00 e0       	ldi	r16, 0x00	; 0
				u8_pinValidity = ATM_FALSE ;
			}

			if(u8_pinValidity== ATM_FALSE && u8_indexArr == (u8_PIN_SIZE - 1)) 
			{
				u8_pinValidity = ATM_TRUE ;
    17cc:	cc 24       	eor	r12, r12
    17ce:	c3 94       	inc	r12
	uint8_t u8_pinValidity = ATM_TRUE ;
	uint8_t u8_indexArr = u8_INTIAL_VAL;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	uint8_t u8_countWrongEnteredTimes = u8_INTIAL_VAL ;
	uint8_t pu8_atmPinBuffer[u8_PIN_SIZE] ;
	while((pu8_cardPin[u8_indexArr] != NULL_CHAR) && (u8_countWrongEnteredTimes < u8_MAX_ENTERED_PIN_TIMES))
    17d0:	e7 01       	movw	r28, r14
    17d2:	c0 0f       	add	r28, r16
    17d4:	d1 1d       	adc	r29, r1
    17d6:	88 81       	ld	r24, Y
    17d8:	88 23       	and	r24, r24
    17da:	19 f0       	breq	.+6      	; 0x17e2 <ATM_u8PinAccessGrant+0x8a>
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	8d 15       	cp	r24, r13
    17e0:	48 f6       	brcc	.-110    	; 0x1774 <ATM_u8PinAccessGrant+0x1c>

		}

	}
	return u8_pinValidity ;
}
    17e2:	8c 2d       	mov	r24, r12
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	08 95       	ret

000017f6 <ATM_u8checkBalanceValidity>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	27 97       	sbiw	r28, 0x07	; 7
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	6c 01       	movw	r12, r24
	uint8_t u8_balanceValidity = u8_BALANCE_VALID ;
	uint8_t pu8_atmMaxBal[u8_MAX_BALANCE_MAX_SIZE] ;
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	uint8_t u8_countWrongBalInput = u8_INTIAL_VAL ;
	uint8_t u8_keyPadReturnASCII = u8_KEYPAD_NOT_PRESSED ;
	LCD_command(DISPLAY_CLEAR) ;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	LCD_printString(LCD_REQUIRE_USER_BAL_STR) ;
    181c:	84 e8       	ldi	r24, 0x84	; 132
    181e:	92 e0       	ldi	r25, 0x02	; 2
    1820:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	LCD_newLine() ;
    1824:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
	LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR) ;
    1828:	84 e9       	ldi	r24, 0x94	; 148
    182a:	92 e0       	ldi	r25, 0x02	; 2
    182c:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	LCD_cursorMove(LEFT,7) ;
    1830:	67 e0       	ldi	r22, 0x07	; 7
    1832:	80 e1       	ldi	r24, 0x10	; 16
    1834:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_cursorMove>
uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID ;
	uint8_t pu8_atmMaxBal[u8_MAX_BALANCE_MAX_SIZE] ;
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
	uint8_t u8_countWrongBalInput = u8_INTIAL_VAL ;
    1838:	f1 2c       	mov	r15, r1

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID ;
	uint8_t pu8_atmMaxBal[u8_MAX_BALANCE_MAX_SIZE] ;
	uint8_t u8_indexArr = u8_INTIAL_VAL ;
    183a:	00 e0       	ldi	r16, 0x00	; 0
	LCD_printString(LCD_REQUIRE_USER_BAL_STR) ;
	LCD_newLine() ;
	LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR) ;
	LCD_cursorMove(LEFT,7) ;

	while((u8_countWrongBalInput<u8_MAX_TIMES_WRONG_AMOUNT) && (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)))
    183c:	3c c0       	rjmp	.+120    	; 0x18b6 <ATM_u8checkBalanceValidity+0xc0>
	{
		u8_keyPadReturnASCII = KeyPad_U8Data();
    183e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <KeyPad_U8Data>
    1842:	18 2f       	mov	r17, r24
		if(u8_keyPadReturnASCII != u8_KEYPAD_NOT_PRESSED)
    1844:	84 31       	cpi	r24, 0x14	; 20
    1846:	b9 f1       	breq	.+110    	; 0x18b6 <ATM_u8checkBalanceValidity+0xc0>
		{
			if(u8_keyPadReturnASCII<='9' && u8_keyPadReturnASCII>='0' )
    1848:	80 ed       	ldi	r24, 0xD0	; 208
    184a:	81 0f       	add	r24, r17
    184c:	8a 30       	cpi	r24, 0x0A	; 10
    184e:	78 f4       	brcc	.+30     	; 0x186e <ATM_u8checkBalanceValidity+0x78>
			{
				pu8_userInputBal[u8_indexArr] = u8_keyPadReturnASCII ;
    1850:	f6 01       	movw	r30, r12
    1852:	e0 0f       	add	r30, r16
    1854:	f1 1d       	adc	r31, r1
    1856:	10 83       	st	Z, r17
				if(u8_indexArr == 4)
    1858:	04 30       	cpi	r16, 0x04	; 4
    185a:	21 f4       	brne	.+8      	; 0x1864 <ATM_u8checkBalanceValidity+0x6e>
				{
					LCD_cursorMove(RIGHT,1) ;
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	84 e1       	ldi	r24, 0x14	; 20
    1860:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_cursorMove>
				}
				LCD_data(u8_keyPadReturnASCII) ;
    1864:	81 2f       	mov	r24, r17
    1866:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_data>
				u8_indexArr++ ;
    186a:	0f 5f       	subi	r16, 0xFF	; 255
    186c:	24 c0       	rjmp	.+72     	; 0x18b6 <ATM_u8checkBalanceValidity+0xc0>
			}
			else
			{
				LCD_command(DISPLAY_CLEAR) ;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
				LCD_printString((uint8_t*)"Enter a valid") ;
    1874:	8c e9       	ldi	r24, 0x9C	; 156
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				LCD_newLine() ;
    187c:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
				LCD_printString((uint8_t*)"number") ;
    1880:	8a ea       	ldi	r24, 0xAA	; 170
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				TIMER0_msdelay(1000) ;
    1888:	88 ee       	ldi	r24, 0xE8	; 232
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
				LCD_command(DISPLAY_CLEAR) ;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
				LCD_printString(LCD_REQUIRE_USER_BAL_STR) ;
    1896:	84 e8       	ldi	r24, 0x84	; 132
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				LCD_newLine() ;
    189e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
				LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR) ;
    18a2:	84 e9       	ldi	r24, 0x94	; 148
    18a4:	92 e0       	ldi	r25, 0x02	; 2
    18a6:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
				LCD_cursorMove(LEFT,7) ;
    18aa:	67 e0       	ldi	r22, 0x07	; 7
    18ac:	80 e1       	ldi	r24, 0x10	; 16
    18ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_cursorMove>
				u8_indexArr = u8_INTIAL_VAL;
				++u8_countWrongBalInput;
    18b2:	f3 94       	inc	r15
				LCD_command(DISPLAY_CLEAR) ;
				LCD_printString(LCD_REQUIRE_USER_BAL_STR) ;
				LCD_newLine() ;
				LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR) ;
				LCD_cursorMove(LEFT,7) ;
				u8_indexArr = u8_INTIAL_VAL;
    18b4:	00 e0       	ldi	r16, 0x00	; 0
	LCD_printString(LCD_REQUIRE_USER_BAL_STR) ;
	LCD_newLine() ;
	LCD_printString(LCD_REQUIRED_SAMPLE_BAL_STR) ;
	LCD_cursorMove(LEFT,7) ;

	while((u8_countWrongBalInput<u8_MAX_TIMES_WRONG_AMOUNT) && (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)))
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	8f 15       	cp	r24, r15
    18ba:	18 f0       	brcs	.+6      	; 0x18c2 <ATM_u8checkBalanceValidity+0xcc>
    18bc:	06 30       	cpi	r16, 0x06	; 6
    18be:	08 f4       	brcc	.+2      	; 0x18c2 <ATM_u8checkBalanceValidity+0xcc>
    18c0:	be cf       	rjmp	.-132    	; 0x183e <ATM_u8checkBalanceValidity+0x48>
				++u8_countWrongBalInput;
			}
		}
	}

	pu8_userInputBal[u8_indexArr] = NULL_CHAR ;
    18c2:	f6 01       	movw	r30, r12
    18c4:	e0 0f       	add	r30, r16
    18c6:	f1 1d       	adc	r31, r1
    18c8:	10 82       	st	Z, r1

	if(u8_countWrongBalInput<u8_MAX_TIMES_WRONG_AMOUNT)
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	8f 15       	cp	r24, r15
    18ce:	08 f1       	brcs	.+66     	; 0x1912 <ATM_u8checkBalanceValidity+0x11c>
	{

		EEPROM_u8ReadNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM,pu8_atmMaxBal,u8_MAX_BALANCE_MAX_SIZE) ;
    18d0:	27 e0       	ldi	r18, 0x07	; 7
    18d2:	ae 01       	movw	r20, r28
    18d4:	4f 5f       	subi	r20, 0xFF	; 255
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	69 e1       	ldi	r22, 0x19	; 25
    18da:	8e ef       	ldi	r24, 0xFE	; 254
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <EEPROM_u8ReadNeededPartBlock>
		u8_indexArr = u8_INTIAL_VAL ;
    18e2:	80 e0       	ldi	r24, 0x00	; 0

		while( (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)) && (pu8_userInputBal[u8_indexArr] != NULL_CHAR) )
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <ATM_u8checkBalanceValidity+0x108>
		{
			if(pu8_atmMaxBal[u8_indexArr]>pu8_userInputBal[u8_indexArr])
    18e6:	e1 e0       	ldi	r30, 0x01	; 1
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	ec 0f       	add	r30, r28
    18ec:	fd 1f       	adc	r31, r29
    18ee:	e8 0f       	add	r30, r24
    18f0:	f1 1d       	adc	r31, r1
    18f2:	20 81       	ld	r18, Z
    18f4:	92 17       	cp	r25, r18
    18f6:	78 f0       	brcs	.+30     	; 0x1916 <ATM_u8checkBalanceValidity+0x120>
			{
				u8_balanceValidity = u8_BALANCE_VALID ;
				break ;
			}
			else if(pu8_atmMaxBal[u8_indexArr]<pu8_userInputBal[u8_indexArr])
    18f8:	29 17       	cp	r18, r25
    18fa:	78 f0       	brcs	.+30     	; 0x191a <ATM_u8checkBalanceValidity+0x124>
				break ;

			}
			else
			{
				u8_indexArr++ ;
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
	{

		EEPROM_u8ReadNeededPartBlock(u8_MAX_BALANCE_PAGE_NUM,u8_MAX_BALANCE_BYTE_NUM,pu8_atmMaxBal,u8_MAX_BALANCE_MAX_SIZE) ;
		u8_indexArr = u8_INTIAL_VAL ;

		while( (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)) && (pu8_userInputBal[u8_indexArr] != NULL_CHAR) )
    18fe:	86 30       	cpi	r24, 0x06	; 6
    1900:	70 f4       	brcc	.+28     	; 0x191e <ATM_u8checkBalanceValidity+0x128>
    1902:	f6 01       	movw	r30, r12
    1904:	e8 0f       	add	r30, r24
    1906:	f1 1d       	adc	r31, r1
    1908:	90 81       	ld	r25, Z
    190a:	91 11       	cpse	r25, r1
    190c:	ec cf       	rjmp	.-40     	; 0x18e6 <ATM_u8checkBalanceValidity+0xf0>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID ;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	07 c0       	rjmp	.+14     	; 0x1920 <ATM_u8checkBalanceValidity+0x12a>
		}

	}
	else
	{
		u8_balanceValidity= u8_BALANCE_NOT_VALID ;
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <ATM_u8checkBalanceValidity+0x12a>

		while( (u8_indexArr<(u8_MAX_BALANCE_MAX_SIZE-1)) && (pu8_userInputBal[u8_indexArr] != NULL_CHAR) )
		{
			if(pu8_atmMaxBal[u8_indexArr]>pu8_userInputBal[u8_indexArr])
			{
				u8_balanceValidity = u8_BALANCE_VALID ;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <ATM_u8checkBalanceValidity+0x12a>
				break ;
			}
			else if(pu8_atmMaxBal[u8_indexArr]<pu8_userInputBal[u8_indexArr])
			{
				u8_balanceValidity = u8_BALANCE_NOT_VALID ;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <ATM_u8checkBalanceValidity+0x12a>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkBalanceValidity(uint8_t* pu8_userInputBal)
{
	uint8_t u8_balanceValidity = u8_BALANCE_VALID ;
    191e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		u8_balanceValidity= u8_BALANCE_NOT_VALID ;
	}
	return u8_balanceValidity ;
}
    1920:	27 96       	adiw	r28, 0x07	; 7
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	df 90       	pop	r13
    1938:	cf 90       	pop	r12
    193a:	08 95       	ret

0000193c <ATM_voidShowTemp>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidShowTemp(void)
{
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	1f 92       	push	r1
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_tempNow, u8_keyPadReturnASCII ;
	LCD_command(DISPLAY_CLEAR) ;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	LCD_printString(LCD_EXIT_TO_MAIN_STR);
    194e:	81 eb       	ldi	r24, 0xB1	; 177
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	LCD_newLine();
    1956:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
	LCD_printString(LCD_SHOW_TEMP_STR);
    195a:	88 eb       	ldi	r24, 0xB8	; 184
    195c:	92 e0       	ldi	r25, 0x02	; 2
    195e:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	u8_keyPadReturnASCII = KeyPad_U8Data() ;
    1962:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <KeyPad_U8Data>
    1966:	18 2f       	mov	r17, r24
	while (u8_keyPadReturnASCII != '1' )
    1968:	19 c0       	rjmp	.+50     	; 0x199c <ATM_voidShowTemp+0x60>
	{
		u8_keyPadReturnASCII = KeyPad_U8Data() ;
    196a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <KeyPad_U8Data>
    196e:	18 2f       	mov	r17, r24
		LM35_u8GetTempInC(&u8_tempNow) ;
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	0e 94 24 06 	call	0xc48	; 0xc48 <LM35_u8GetTempInC>
		LCD_printDigits(u8_tempNow);
    1978:	69 81       	ldd	r22, Y+1	; 0x01
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_printDigits>
		LCD_cursorMove(LEFT,2);
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	80 e1       	ldi	r24, 0x10	; 16
    1988:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_cursorMove>
		if(u8_tempNow>u8_MAX_TEMP)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	84 32       	cpi	r24, 0x24	; 36
    1990:	18 f0       	brcs	.+6      	; 0x1998 <ATM_voidShowTemp+0x5c>
		{
			BUZZER_on();
    1992:	0e 94 4b 02 	call	0x496	; 0x496 <BUZZER_on>
    1996:	02 c0       	rjmp	.+4      	; 0x199c <ATM_voidShowTemp+0x60>
		}
		else
		{
			BUZZER_off();
    1998:	0e 94 51 02 	call	0x4a2	; 0x4a2 <BUZZER_off>
	LCD_command(DISPLAY_CLEAR) ;
	LCD_printString(LCD_EXIT_TO_MAIN_STR);
	LCD_newLine();
	LCD_printString(LCD_SHOW_TEMP_STR);
	u8_keyPadReturnASCII = KeyPad_U8Data() ;
	while (u8_keyPadReturnASCII != '1' )
    199c:	11 33       	cpi	r17, 0x31	; 49
    199e:	29 f7       	brne	.-54     	; 0x196a <ATM_voidShowTemp+0x2e>
		else
		{
			BUZZER_off();
		}
	}
}
    19a0:	0f 90       	pop	r0
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	08 95       	ret

000019aa <ATM_voidGetCash>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ATM_voidGetCash(void)
{
	LCD_command(DISPLAY_CLEAR) ;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
	LCD_printString(LCD_WAIT_CASH_STR);
    19b0:	83 ec       	ldi	r24, 0xC3	; 195
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
	LCD_newLine() ;
    19b8:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
	motorOn(MOTOR_ID_01,FORWARD) ;
    19bc:	67 e1       	ldi	r22, 0x17	; 23
    19be:	84 e1       	ldi	r24, 0x14	; 20
    19c0:	0e 94 cc 06 	call	0xd98	; 0xd98 <motorOn>
	TIMER0_msdelay(1000) ;
    19c4:	88 ee       	ldi	r24, 0xE8	; 232
    19c6:	93 e0       	ldi	r25, 0x03	; 3
    19c8:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
	motorOff(MOTOR_ID_01,FORWARD) ;
    19cc:	67 e1       	ldi	r22, 0x17	; 23
    19ce:	84 e1       	ldi	r24, 0x14	; 20
    19d0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <motorOff>
	LCD_command(DISPLAY_CLEAR) ;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
    19da:	08 95       	ret

000019dc <ATM_u8checkAccounBal>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	8c 01       	movw	r16, r24
    19e6:	eb 01       	movw	r28, r22
    19e8:	ca 01       	movw	r24, r20
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL ;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL ;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
	EEPROM_u8ReadNeededPartBlock(u16_RecNum,u8_BALANCE_BYTE_NUM,pu8_returnUserBal,u8_BALANCE_MAX_SIZE) ;
    19ea:	29 e0       	ldi	r18, 0x09	; 9
    19ec:	ab 01       	movw	r20, r22
    19ee:	64 e1       	ldi	r22, 0x14	; 20
    19f0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <EEPROM_u8ReadNeededPartBlock>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL ;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL ;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
	EEPROM_u8ReadNeededPartBlock(u16_RecNum,u8_BALANCE_BYTE_NUM,pu8_returnUserBal,u8_BALANCE_MAX_SIZE) ;

	//cashing first non-zero number in user Account balance
	while(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <ATM_u8checkAccounBal+0x22>
	{
		if(pu8_returnUserBal[u8_indexReturnUserBal]>0)
    19f8:	91 11       	cpse	r25, r1
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <ATM_u8checkAccounBal+0x2e>
		{
			break ;
		}
		else
		{
			u8_indexReturnUserBal++ ;
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL ;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
	EEPROM_u8ReadNeededPartBlock(u16_RecNum,u8_BALANCE_BYTE_NUM,pu8_returnUserBal,u8_BALANCE_MAX_SIZE) ;

	//cashing first non-zero number in user Account balance
	while(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
    19fe:	fe 01       	movw	r30, r28
    1a00:	e8 0f       	add	r30, r24
    1a02:	f1 1d       	adc	r31, r1
    1a04:	90 81       	ld	r25, Z
    1a06:	91 11       	cpse	r25, r1
    1a08:	f7 cf       	rjmp	.-18     	; 0x19f8 <ATM_u8checkAccounBal+0x1c>
		{
			u8_indexReturnUserBal++ ;
		}
	}

	if(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
    1a0a:	91 11       	cpse	r25, r1
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <ATM_u8checkAccounBal+0x3e>
			LCD_command(DISPLAY_CLEAR) ;
		}
	}
	else
	{
		u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1a0e:	c0 e0       	ldi	r28, 0x00	; 0
    1a10:	65 c0       	rjmp	.+202    	; 0x1adc <ATM_u8checkAccounBal+0x100>

	if(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
	{
		while(pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR )
		{
			if(pu8_balanceWanted[u8_indexBalWanted]>0)
    1a12:	21 11       	cpse	r18, r1
    1a14:	09 c0       	rjmp	.+18     	; 0x1a28 <ATM_u8checkAccounBal+0x4c>
			{
				break ;
			}
			else
			{
				++u8_indexBalWanted ;
    1a16:	9f 5f       	subi	r25, 0xFF	; 255
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <ATM_u8checkAccounBal+0x40>
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	if(pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR)
	{
		while(pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR )
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	e9 0f       	add	r30, r25
    1a20:	f1 1d       	adc	r31, r1
    1a22:	20 81       	ld	r18, Z
    1a24:	21 11       	cpse	r18, r1
    1a26:	f5 cf       	rjmp	.-22     	; 0x1a12 <ATM_u8checkAccounBal+0x36>
			{
				++u8_indexBalWanted ;
			}
		}

		if( ((u8_BALANCE_MAX_SIZE - u8_indexReturnUserBal) == (u8_MAX_BALANCE_MAX_SIZE - u8_indexBalWanted)) )
    1a28:	49 e0       	ldi	r20, 0x09	; 9
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	48 1b       	sub	r20, r24
    1a2e:	51 09       	sbc	r21, r1
    1a30:	27 e0       	ldi	r18, 0x07	; 7
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	29 1b       	sub	r18, r25
    1a36:	31 09       	sbc	r19, r1
    1a38:	42 17       	cp	r20, r18
    1a3a:	53 07       	cpc	r21, r19
    1a3c:	99 f5       	brne	.+102    	; 0x1aa4 <ATM_u8checkAccounBal+0xc8>
    1a3e:	1c c0       	rjmp	.+56     	; 0x1a78 <ATM_u8checkAccounBal+0x9c>
		{
			while((pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR) && (pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR ) )
			{
				if(pu8_balanceWanted[u8_indexBalWanted] < pu8_returnUserBal[u8_indexReturnUserBal])
    1a40:	32 17       	cp	r19, r18
    1a42:	40 f1       	brcs	.+80     	; 0x1a94 <ATM_u8checkAccounBal+0xb8>
				{
					//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
					u8_checkAccBalValdity = u8_BALANCE_VALID ;
					break;
				}
				else if(pu8_balanceWanted[u8_indexBalWanted] > pu8_returnUserBal[u8_indexReturnUserBal])
    1a44:	23 17       	cp	r18, r19
    1a46:	b0 f4       	brcc	.+44     	; 0x1a74 <ATM_u8checkAccounBal+0x98>
				{
					//print user has no enough balance terminate the process
					u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
					LCD_command(DISPLAY_CLEAR) ;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
					LCD_printString((uint8_t*)"Not Enough");
    1a4e:	84 ed       	ldi	r24, 0xD4	; 212
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
					LCD_newLine() ;
    1a56:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
					LCD_printString((uint8_t*)"Account Bal.");
    1a5a:	8f ed       	ldi	r24, 0xDF	; 223
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
					TIMER0_msdelay(1000) ;
    1a62:	88 ee       	ldi	r24, 0xE8	; 232
    1a64:	93 e0       	ldi	r25, 0x03	; 3
    1a66:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
					LCD_command(DISPLAY_CLEAR) ;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
					break;
				}
				else if(pu8_balanceWanted[u8_indexBalWanted] > pu8_returnUserBal[u8_indexReturnUserBal])
				{
					//print user has no enough balance terminate the process
					u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1a70:	c0 e0       	ldi	r28, 0x00	; 0
					LCD_printString((uint8_t*)"Not Enough");
					LCD_newLine() ;
					LCD_printString((uint8_t*)"Account Bal.");
					TIMER0_msdelay(1000) ;
					LCD_command(DISPLAY_CLEAR) ;
					break ;
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <ATM_u8checkAccounBal+0xbe>
				}
				else
				{
					++u8_indexBalWanted ;
    1a74:	9f 5f       	subi	r25, 0xFF	; 255
					++u8_indexReturnUserBal ;
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
			}
		}

		if( ((u8_BALANCE_MAX_SIZE - u8_indexReturnUserBal) == (u8_MAX_BALANCE_MAX_SIZE - u8_indexBalWanted)) )
		{
			while((pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR) && (pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR ) )
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e8 0f       	add	r30, r24
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	20 81       	ld	r18, Z
    1a80:	22 23       	and	r18, r18
    1a82:	51 f0       	breq	.+20     	; 0x1a98 <ATM_u8checkAccounBal+0xbc>
    1a84:	f8 01       	movw	r30, r16
    1a86:	e9 0f       	add	r30, r25
    1a88:	f1 1d       	adc	r31, r1
    1a8a:	30 81       	ld	r19, Z
    1a8c:	31 11       	cpse	r19, r1
    1a8e:	d8 cf       	rjmp	.-80     	; 0x1a40 <ATM_u8checkAccounBal+0x64>
uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL ;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL ;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1a90:	c0 e0       	ldi	r28, 0x00	; 0
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <ATM_u8checkAccounBal+0xbe>
			while((pu8_returnUserBal[u8_indexReturnUserBal]!=NULL_CHAR) && (pu8_balanceWanted[u8_indexBalWanted] != NULL_CHAR ) )
			{
				if(pu8_balanceWanted[u8_indexBalWanted] < pu8_returnUserBal[u8_indexReturnUserBal])
				{
					//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
					u8_checkAccBalValdity = u8_BALANCE_VALID ;
    1a94:	c1 e0       	ldi	r28, 0x01	; 1
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <ATM_u8checkAccounBal+0xbe>
uint8_t ATM_u8checkAccounBal(uint8_t* pu8_balanceWanted,uint8_t* pu8_returnUserBal,uint16_t u16_RecNum)
{
	
	uint8_t u8_indexReturnUserBal = u8_INTIAL_VAL ;
	uint8_t u8_indexBalWanted = u8_INTIAL_VAL ;
	uint8_t u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1a98:	c0 e0       	ldi	r28, 0x00	; 0
				{
					++u8_indexBalWanted ;
					++u8_indexReturnUserBal ;
				}
			}
			if(u8_checkAccBalValdity == u8_BALANCE_VALID)
    1a9a:	c1 30       	cpi	r28, 0x01	; 1
    1a9c:	f9 f4       	brne	.+62     	; 0x1adc <ATM_u8checkAccounBal+0x100>
			{
				//balance of user is exactly as he wanted , rotate the motor for 1 sec, update balance,and terminate process
				ATM_voidGetCash() ;
    1a9e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ATM_voidGetCash>
    1aa2:	1c c0       	rjmp	.+56     	; 0x1adc <ATM_u8checkAccounBal+0x100>
			}
		}
		else if ( ((u8_BALANCE_MAX_SIZE-u8_indexReturnUserBal) > (u8_MAX_BALANCE_MAX_SIZE-u8_indexBalWanted)) )
    1aa4:	24 17       	cp	r18, r20
    1aa6:	35 07       	cpc	r19, r21
    1aa8:	24 f4       	brge	.+8      	; 0x1ab2 <ATM_u8checkAccounBal+0xd6>
		{
			//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
			u8_checkAccBalValdity = u8_BALANCE_VALID ;
			ATM_voidGetCash() ;
    1aaa:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ATM_voidGetCash>
			}
		}
		else if ( ((u8_BALANCE_MAX_SIZE-u8_indexReturnUserBal) > (u8_MAX_BALANCE_MAX_SIZE-u8_indexBalWanted)) )
		{
			//user has enough amount rotate the motor for 1 sec, update balance,and terminate process
			u8_checkAccBalValdity = u8_BALANCE_VALID ;
    1aae:	c1 e0       	ldi	r28, 0x01	; 1
    1ab0:	15 c0       	rjmp	.+42     	; 0x1adc <ATM_u8checkAccounBal+0x100>
		}
		else
		{
			//process termination due to user has no enough balance
			u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
			LCD_command(DISPLAY_CLEAR) ;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
			LCD_printString((uint8_t*)"Not Enough");
    1ab8:	84 ed       	ldi	r24, 0xD4	; 212
    1aba:	92 e0       	ldi	r25, 0x02	; 2
    1abc:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
			LCD_newLine() ;
    1ac0:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_newLine>
			LCD_printString((uint8_t*)"Account Bal.");
    1ac4:	8f ed       	ldi	r24, 0xDF	; 223
    1ac6:	92 e0       	ldi	r25, 0x02	; 2
    1ac8:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCD_printString>
			TIMER0_msdelay(1000) ;
    1acc:	88 ee       	ldi	r24, 0xE8	; 232
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	0e 94 bc 09 	call	0x1378	; 0x1378 <TIMER0_msdelay>
			LCD_command(DISPLAY_CLEAR) ;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_command>
			ATM_voidGetCash() ;
		}
		else
		{
			//process termination due to user has no enough balance
			u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
    1ada:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		u8_checkAccBalValdity = u8_BALANCE_NOT_VALID ;
	}
	return u8_checkAccBalValdity;
}
    1adc:	8c 2f       	mov	r24, r28
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <ATM_voidStoreRecNum>:

void ATM_voidStoreRecNum(uint16_t u16_recNum)
{
    1ae8:	cf 93       	push	r28
    1aea:	c9 2f       	mov	r28, r25
	uint8_t u8_highNipple, u8_lowNipple;
	
	u8_lowNipple = (uint8_t)(u16_recNum);
	u8_highNipple = (uint8_t)(u16_recNum >> 8);
	
	EEPROM_u8WriteWantedByte(u8_RECORDS_PAGE_NUM,u8_RECORDS_FIRST_BYTE_NUM, u8_lowNipple);
    1aec:	48 2f       	mov	r20, r24
    1aee:	63 e2       	ldi	r22, 0x23	; 35
    1af0:	8e ef       	ldi	r24, 0xFE	; 254
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	0e 94 a3 02 	call	0x546	; 0x546 <EEPROM_u8WriteWantedByte>
	EEPROM_u8WriteWantedByte(u8_RECORDS_PAGE_NUM,u8_RECORDS_SECOND_BYTE_NUM, u8_highNipple);
    1af8:	4c 2f       	mov	r20, r28
    1afa:	64 e2       	ldi	r22, 0x24	; 36
    1afc:	8e ef       	ldi	r24, 0xFE	; 254
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	0e 94 a3 02 	call	0x546	; 0x546 <EEPROM_u8WriteWantedByte>
}
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <ATM_u16GetRecNum>:

uint16_t ATM_u16GetRecNum(void)
{
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <ATM_u16GetRecNum+0x6>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_highNipple, u8_lowNipple;
	uint16_t u16_recNum;
	EEPROM_u8ReadWantedByte(u8_RECORDS_PAGE_NUM,u8_RECORDS_FIRST_BYTE_NUM,&u8_lowNipple);
    1b12:	ae 01       	movw	r20, r28
    1b14:	4e 5f       	subi	r20, 0xFE	; 254
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	63 e2       	ldi	r22, 0x23	; 35
    1b1a:	8e ef       	ldi	r24, 0xFE	; 254
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	0e 94 33 03 	call	0x666	; 0x666 <EEPROM_u8ReadWantedByte>
	EEPROM_u8ReadWantedByte(u8_RECORDS_PAGE_NUM,u8_RECORDS_SECOND_BYTE_NUM,&u8_highNipple);
    1b22:	ae 01       	movw	r20, r28
    1b24:	4f 5f       	subi	r20, 0xFF	; 255
    1b26:	5f 4f       	sbci	r21, 0xFF	; 255
    1b28:	64 e2       	ldi	r22, 0x24	; 36
    1b2a:	8e ef       	ldi	r24, 0xFE	; 254
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	0e 94 33 03 	call	0x666	; 0x666 <EEPROM_u8ReadWantedByte>
	
	u16_recNum = (uint16_t)((uint16_t)(u8_highNipple << 8) | (u8_lowNipple));
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	99 81       	ldd	r25, Y+1	; 0x01
    1b36:	2a 81       	ldd	r18, Y+2	; 0x02
	return u16_recNum;
    1b38:	82 2b       	or	r24, r18
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <ATM_panValidity>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//function take wanted PAN to get and pointer to the PAN if found and return ATM_TRUE if PAN found and false otherwise
uint8_t ATM_panValidity(uint8_t* pu8_panWantedBuffer,uint16_t* pu16_wantedPanRecordnum)
{
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	61 97       	sbiw	r28, 0x11	; 17
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	6c 01       	movw	r12, r24
    1b6a:	5b 01       	movw	r10, r22
	uint8_t u8_PANstate = ATM_FALSE  ;
	uint16_t u16_recordNum = u8_INTIAL_VAL ;
	uint16_t u16_RecCount  = u8_INTIAL_VAL ;
	uint8_t pu8_atmServerPAN[u8_PAN_MAX_SIZE] ;
	
	u16_recordNum = ATM_u16GetRecNum();
    1b6c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <ATM_u16GetRecNum>
    1b70:	7c 01       	movw	r14, r24
//function take wanted PAN to get and pointer to the PAN if found and return ATM_TRUE if PAN found and false otherwise
uint8_t ATM_panValidity(uint8_t* pu8_panWantedBuffer,uint16_t* pu16_wantedPanRecordnum)
{
	uint8_t u8_PANstate = ATM_FALSE  ;
	uint16_t u16_recordNum = u8_INTIAL_VAL ;
	uint16_t u16_RecCount  = u8_INTIAL_VAL ;
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t pu8_atmServerPAN[u8_PAN_MAX_SIZE] ;
	
	u16_recordNum = ATM_u16GetRecNum();
	while(u16_RecCount <= u16_recordNum)
    1b76:	16 c0       	rjmp	.+44     	; 0x1ba4 <ATM_panValidity+0x60>
	{
		EEPROM_u8ReadNeededPartBlock(u16_RecCount,u8_PAN_BYTE_NUM,pu8_atmServerPAN,u8_PAN_MAX_SIZE) ;
    1b78:	21 e1       	ldi	r18, 0x11	; 17
    1b7a:	ae 01       	movw	r20, r28
    1b7c:	4f 5f       	subi	r20, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	c8 01       	movw	r24, r16
    1b84:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <EEPROM_u8ReadNeededPartBlock>

		if(strcmp(pu8_atmServerPAN,pu8_panWantedBuffer) == u8_EQUAL_STR)
    1b88:	b6 01       	movw	r22, r12
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	0e 94 b9 11 	call	0x2372	; 0x2372 <strcmp>
    1b92:	89 2b       	or	r24, r25
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <ATM_panValidity+0x5c>
		{
			u8_PANstate = ATM_TRUE;
			*pu16_wantedPanRecordnum = u16_RecCount ;
    1b96:	f5 01       	movw	r30, r10
    1b98:	11 83       	std	Z+1, r17	; 0x01
    1b9a:	00 83       	st	Z, r16
	{
		EEPROM_u8ReadNeededPartBlock(u16_RecCount,u8_PAN_BYTE_NUM,pu8_atmServerPAN,u8_PAN_MAX_SIZE) ;

		if(strcmp(pu8_atmServerPAN,pu8_panWantedBuffer) == u8_EQUAL_STR)
		{
			u8_PANstate = ATM_TRUE;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
			*pu16_wantedPanRecordnum = u16_RecCount ;
			break;
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <ATM_panValidity+0x68>
		}
		u16_RecCount++ ;
    1ba0:	0f 5f       	subi	r16, 0xFF	; 255
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t u16_recordNum = u8_INTIAL_VAL ;
	uint16_t u16_RecCount  = u8_INTIAL_VAL ;
	uint8_t pu8_atmServerPAN[u8_PAN_MAX_SIZE] ;
	
	u16_recordNum = ATM_u16GetRecNum();
	while(u16_RecCount <= u16_recordNum)
    1ba4:	e0 16       	cp	r14, r16
    1ba6:	f1 06       	cpc	r15, r17
    1ba8:	38 f7       	brcc	.-50     	; 0x1b78 <ATM_panValidity+0x34>
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//function take wanted PAN to get and pointer to the PAN if found and return ATM_TRUE if PAN found and false otherwise
uint8_t ATM_panValidity(uint8_t* pu8_panWantedBuffer,uint16_t* pu16_wantedPanRecordnum)
{
	uint8_t u8_PANstate = ATM_FALSE  ;
    1baa:	80 e0       	ldi	r24, 0x00	; 0
		}
		u16_RecCount++ ;
	}

	return u8_PANstate ;
}
    1bac:	61 96       	adiw	r28, 0x11	; 17
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	af 90       	pop	r10
    1bcc:	08 95       	ret

00001bce <__subsf3>:
    1bce:	50 58       	subi	r21, 0x80	; 128

00001bd0 <__addsf3>:
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	aa 27       	eor	r26, r26
    1bd4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__addsf3x>
    1bd8:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__fp_round>
    1bdc:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fp_pscA>
    1be0:	38 f0       	brcs	.+14     	; 0x1bf0 <__addsf3+0x20>
    1be2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__fp_pscB>
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__addsf3+0x20>
    1be8:	39 f4       	brne	.+14     	; 0x1bf8 <__addsf3+0x28>
    1bea:	9f 3f       	cpi	r25, 0xFF	; 255
    1bec:	19 f4       	brne	.+6      	; 0x1bf4 <__addsf3+0x24>
    1bee:	26 f4       	brtc	.+8      	; 0x1bf8 <__addsf3+0x28>
    1bf0:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__fp_nan>
    1bf4:	0e f4       	brtc	.+2      	; 0x1bf8 <__addsf3+0x28>
    1bf6:	e0 95       	com	r30
    1bf8:	e7 fb       	bst	r30, 7
    1bfa:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>

00001bfe <__addsf3x>:
    1bfe:	e9 2f       	mov	r30, r25
    1c00:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fp_split3>
    1c04:	58 f3       	brcs	.-42     	; 0x1bdc <__addsf3+0xc>
    1c06:	ba 17       	cp	r27, r26
    1c08:	62 07       	cpc	r22, r18
    1c0a:	73 07       	cpc	r23, r19
    1c0c:	84 07       	cpc	r24, r20
    1c0e:	95 07       	cpc	r25, r21
    1c10:	20 f0       	brcs	.+8      	; 0x1c1a <__addsf3x+0x1c>
    1c12:	79 f4       	brne	.+30     	; 0x1c32 <__addsf3x+0x34>
    1c14:	a6 f5       	brtc	.+104    	; 0x1c7e <__addsf3x+0x80>
    1c16:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__fp_zero>
    1c1a:	0e f4       	brtc	.+2      	; 0x1c1e <__addsf3x+0x20>
    1c1c:	e0 95       	com	r30
    1c1e:	0b 2e       	mov	r0, r27
    1c20:	ba 2f       	mov	r27, r26
    1c22:	a0 2d       	mov	r26, r0
    1c24:	0b 01       	movw	r0, r22
    1c26:	b9 01       	movw	r22, r18
    1c28:	90 01       	movw	r18, r0
    1c2a:	0c 01       	movw	r0, r24
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	a0 01       	movw	r20, r0
    1c30:	11 24       	eor	r1, r1
    1c32:	ff 27       	eor	r31, r31
    1c34:	59 1b       	sub	r21, r25
    1c36:	99 f0       	breq	.+38     	; 0x1c5e <__addsf3x+0x60>
    1c38:	59 3f       	cpi	r21, 0xF9	; 249
    1c3a:	50 f4       	brcc	.+20     	; 0x1c50 <__addsf3x+0x52>
    1c3c:	50 3e       	cpi	r21, 0xE0	; 224
    1c3e:	68 f1       	brcs	.+90     	; 0x1c9a <__addsf3x+0x9c>
    1c40:	1a 16       	cp	r1, r26
    1c42:	f0 40       	sbci	r31, 0x00	; 0
    1c44:	a2 2f       	mov	r26, r18
    1c46:	23 2f       	mov	r18, r19
    1c48:	34 2f       	mov	r19, r20
    1c4a:	44 27       	eor	r20, r20
    1c4c:	58 5f       	subi	r21, 0xF8	; 248
    1c4e:	f3 cf       	rjmp	.-26     	; 0x1c36 <__addsf3x+0x38>
    1c50:	46 95       	lsr	r20
    1c52:	37 95       	ror	r19
    1c54:	27 95       	ror	r18
    1c56:	a7 95       	ror	r26
    1c58:	f0 40       	sbci	r31, 0x00	; 0
    1c5a:	53 95       	inc	r21
    1c5c:	c9 f7       	brne	.-14     	; 0x1c50 <__addsf3x+0x52>
    1c5e:	7e f4       	brtc	.+30     	; 0x1c7e <__addsf3x+0x80>
    1c60:	1f 16       	cp	r1, r31
    1c62:	ba 0b       	sbc	r27, r26
    1c64:	62 0b       	sbc	r22, r18
    1c66:	73 0b       	sbc	r23, r19
    1c68:	84 0b       	sbc	r24, r20
    1c6a:	ba f0       	brmi	.+46     	; 0x1c9a <__addsf3x+0x9c>
    1c6c:	91 50       	subi	r25, 0x01	; 1
    1c6e:	a1 f0       	breq	.+40     	; 0x1c98 <__addsf3x+0x9a>
    1c70:	ff 0f       	add	r31, r31
    1c72:	bb 1f       	adc	r27, r27
    1c74:	66 1f       	adc	r22, r22
    1c76:	77 1f       	adc	r23, r23
    1c78:	88 1f       	adc	r24, r24
    1c7a:	c2 f7       	brpl	.-16     	; 0x1c6c <__addsf3x+0x6e>
    1c7c:	0e c0       	rjmp	.+28     	; 0x1c9a <__addsf3x+0x9c>
    1c7e:	ba 0f       	add	r27, r26
    1c80:	62 1f       	adc	r22, r18
    1c82:	73 1f       	adc	r23, r19
    1c84:	84 1f       	adc	r24, r20
    1c86:	48 f4       	brcc	.+18     	; 0x1c9a <__addsf3x+0x9c>
    1c88:	87 95       	ror	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	b7 95       	ror	r27
    1c90:	f7 95       	ror	r31
    1c92:	9e 3f       	cpi	r25, 0xFE	; 254
    1c94:	08 f0       	brcs	.+2      	; 0x1c98 <__addsf3x+0x9a>
    1c96:	b0 cf       	rjmp	.-160    	; 0x1bf8 <__addsf3+0x28>
    1c98:	93 95       	inc	r25
    1c9a:	88 0f       	add	r24, r24
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <__addsf3x+0xa2>
    1c9e:	99 27       	eor	r25, r25
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	97 95       	ror	r25
    1ca4:	87 95       	ror	r24
    1ca6:	08 95       	ret

00001ca8 <__divsf3>:
    1ca8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__divsf3x>
    1cac:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__fp_round>
    1cb0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__fp_pscB>
    1cb4:	58 f0       	brcs	.+22     	; 0x1ccc <__divsf3+0x24>
    1cb6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fp_pscA>
    1cba:	40 f0       	brcs	.+16     	; 0x1ccc <__divsf3+0x24>
    1cbc:	29 f4       	brne	.+10     	; 0x1cc8 <__divsf3+0x20>
    1cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc0:	29 f0       	breq	.+10     	; 0x1ccc <__divsf3+0x24>
    1cc2:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>
    1cc6:	51 11       	cpse	r21, r1
    1cc8:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_szero>
    1ccc:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__fp_nan>

00001cd0 <__divsf3x>:
    1cd0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fp_split3>
    1cd4:	68 f3       	brcs	.-38     	; 0x1cb0 <__divsf3+0x8>

00001cd6 <__divsf3_pse>:
    1cd6:	99 23       	and	r25, r25
    1cd8:	b1 f3       	breq	.-20     	; 0x1cc6 <__divsf3+0x1e>
    1cda:	55 23       	and	r21, r21
    1cdc:	91 f3       	breq	.-28     	; 0x1cc2 <__divsf3+0x1a>
    1cde:	95 1b       	sub	r25, r21
    1ce0:	55 0b       	sbc	r21, r21
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	62 17       	cp	r22, r18
    1ce8:	73 07       	cpc	r23, r19
    1cea:	84 07       	cpc	r24, r20
    1cec:	38 f0       	brcs	.+14     	; 0x1cfc <__divsf3_pse+0x26>
    1cee:	9f 5f       	subi	r25, 0xFF	; 255
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	aa 1f       	adc	r26, r26
    1cfa:	a9 f3       	breq	.-22     	; 0x1ce6 <__divsf3_pse+0x10>
    1cfc:	35 d0       	rcall	.+106    	; 0x1d68 <__divsf3_pse+0x92>
    1cfe:	0e 2e       	mov	r0, r30
    1d00:	3a f0       	brmi	.+14     	; 0x1d10 <__divsf3_pse+0x3a>
    1d02:	e0 e8       	ldi	r30, 0x80	; 128
    1d04:	32 d0       	rcall	.+100    	; 0x1d6a <__divsf3_pse+0x94>
    1d06:	91 50       	subi	r25, 0x01	; 1
    1d08:	50 40       	sbci	r21, 0x00	; 0
    1d0a:	e6 95       	lsr	r30
    1d0c:	00 1c       	adc	r0, r0
    1d0e:	ca f7       	brpl	.-14     	; 0x1d02 <__divsf3_pse+0x2c>
    1d10:	2b d0       	rcall	.+86     	; 0x1d68 <__divsf3_pse+0x92>
    1d12:	fe 2f       	mov	r31, r30
    1d14:	29 d0       	rcall	.+82     	; 0x1d68 <__divsf3_pse+0x92>
    1d16:	66 0f       	add	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	26 17       	cp	r18, r22
    1d20:	37 07       	cpc	r19, r23
    1d22:	48 07       	cpc	r20, r24
    1d24:	ab 07       	cpc	r26, r27
    1d26:	b0 e8       	ldi	r27, 0x80	; 128
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <__divsf3_pse+0x56>
    1d2a:	bb 0b       	sbc	r27, r27
    1d2c:	80 2d       	mov	r24, r0
    1d2e:	bf 01       	movw	r22, r30
    1d30:	ff 27       	eor	r31, r31
    1d32:	93 58       	subi	r25, 0x83	; 131
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	3a f0       	brmi	.+14     	; 0x1d46 <__divsf3_pse+0x70>
    1d38:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	78 f0       	brcs	.+30     	; 0x1d5c <__divsf3_pse+0x86>
    1d3e:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>
    1d42:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_szero>
    1d46:	5f 3f       	cpi	r21, 0xFF	; 255
    1d48:	e4 f3       	brlt	.-8      	; 0x1d42 <__divsf3_pse+0x6c>
    1d4a:	98 3e       	cpi	r25, 0xE8	; 232
    1d4c:	d4 f3       	brlt	.-12     	; 0x1d42 <__divsf3_pse+0x6c>
    1d4e:	86 95       	lsr	r24
    1d50:	77 95       	ror	r23
    1d52:	67 95       	ror	r22
    1d54:	b7 95       	ror	r27
    1d56:	f7 95       	ror	r31
    1d58:	9f 5f       	subi	r25, 0xFF	; 255
    1d5a:	c9 f7       	brne	.-14     	; 0x1d4e <__divsf3_pse+0x78>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	91 1d       	adc	r25, r1
    1d60:	96 95       	lsr	r25
    1d62:	87 95       	ror	r24
    1d64:	97 f9       	bld	r25, 7
    1d66:	08 95       	ret
    1d68:	e1 e0       	ldi	r30, 0x01	; 1
    1d6a:	66 0f       	add	r22, r22
    1d6c:	77 1f       	adc	r23, r23
    1d6e:	88 1f       	adc	r24, r24
    1d70:	bb 1f       	adc	r27, r27
    1d72:	62 17       	cp	r22, r18
    1d74:	73 07       	cpc	r23, r19
    1d76:	84 07       	cpc	r24, r20
    1d78:	ba 07       	cpc	r27, r26
    1d7a:	20 f0       	brcs	.+8      	; 0x1d84 <__divsf3_pse+0xae>
    1d7c:	62 1b       	sub	r22, r18
    1d7e:	73 0b       	sbc	r23, r19
    1d80:	84 0b       	sbc	r24, r20
    1d82:	ba 0b       	sbc	r27, r26
    1d84:	ee 1f       	adc	r30, r30
    1d86:	88 f7       	brcc	.-30     	; 0x1d6a <__divsf3_pse+0x94>
    1d88:	e0 95       	com	r30
    1d8a:	08 95       	ret

00001d8c <__fixunssfsi>:
    1d8c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_splitA>
    1d90:	88 f0       	brcs	.+34     	; 0x1db4 <__fixunssfsi+0x28>
    1d92:	9f 57       	subi	r25, 0x7F	; 127
    1d94:	98 f0       	brcs	.+38     	; 0x1dbc <__fixunssfsi+0x30>
    1d96:	b9 2f       	mov	r27, r25
    1d98:	99 27       	eor	r25, r25
    1d9a:	b7 51       	subi	r27, 0x17	; 23
    1d9c:	b0 f0       	brcs	.+44     	; 0x1dca <__fixunssfsi+0x3e>
    1d9e:	e1 f0       	breq	.+56     	; 0x1dd8 <__fixunssfsi+0x4c>
    1da0:	66 0f       	add	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	1a f0       	brmi	.+6      	; 0x1db0 <__fixunssfsi+0x24>
    1daa:	ba 95       	dec	r27
    1dac:	c9 f7       	brne	.-14     	; 0x1da0 <__fixunssfsi+0x14>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <__fixunssfsi+0x4c>
    1db0:	b1 30       	cpi	r27, 0x01	; 1
    1db2:	91 f0       	breq	.+36     	; 0x1dd8 <__fixunssfsi+0x4c>
    1db4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_zero>
    1db8:	b1 e0       	ldi	r27, 0x01	; 1
    1dba:	08 95       	ret
    1dbc:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__fp_zero>
    1dc0:	67 2f       	mov	r22, r23
    1dc2:	78 2f       	mov	r23, r24
    1dc4:	88 27       	eor	r24, r24
    1dc6:	b8 5f       	subi	r27, 0xF8	; 248
    1dc8:	39 f0       	breq	.+14     	; 0x1dd8 <__fixunssfsi+0x4c>
    1dca:	b9 3f       	cpi	r27, 0xF9	; 249
    1dcc:	cc f3       	brlt	.-14     	; 0x1dc0 <__fixunssfsi+0x34>
    1dce:	86 95       	lsr	r24
    1dd0:	77 95       	ror	r23
    1dd2:	67 95       	ror	r22
    1dd4:	b3 95       	inc	r27
    1dd6:	d9 f7       	brne	.-10     	; 0x1dce <__fixunssfsi+0x42>
    1dd8:	3e f4       	brtc	.+14     	; 0x1de8 <__fixunssfsi+0x5c>
    1dda:	90 95       	com	r25
    1ddc:	80 95       	com	r24
    1dde:	70 95       	com	r23
    1de0:	61 95       	neg	r22
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	8f 4f       	sbci	r24, 0xFF	; 255
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	08 95       	ret

00001dea <__floatunsisf>:
    1dea:	e8 94       	clt
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <__floatsisf+0x12>

00001dee <__floatsisf>:
    1dee:	97 fb       	bst	r25, 7
    1df0:	3e f4       	brtc	.+14     	; 0x1e00 <__floatsisf+0x12>
    1df2:	90 95       	com	r25
    1df4:	80 95       	com	r24
    1df6:	70 95       	com	r23
    1df8:	61 95       	neg	r22
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	99 23       	and	r25, r25
    1e02:	a9 f0       	breq	.+42     	; 0x1e2e <__floatsisf+0x40>
    1e04:	f9 2f       	mov	r31, r25
    1e06:	96 e9       	ldi	r25, 0x96	; 150
    1e08:	bb 27       	eor	r27, r27
    1e0a:	93 95       	inc	r25
    1e0c:	f6 95       	lsr	r31
    1e0e:	87 95       	ror	r24
    1e10:	77 95       	ror	r23
    1e12:	67 95       	ror	r22
    1e14:	b7 95       	ror	r27
    1e16:	f1 11       	cpse	r31, r1
    1e18:	f8 cf       	rjmp	.-16     	; 0x1e0a <__floatsisf+0x1c>
    1e1a:	fa f4       	brpl	.+62     	; 0x1e5a <__floatsisf+0x6c>
    1e1c:	bb 0f       	add	r27, r27
    1e1e:	11 f4       	brne	.+4      	; 0x1e24 <__floatsisf+0x36>
    1e20:	60 ff       	sbrs	r22, 0
    1e22:	1b c0       	rjmp	.+54     	; 0x1e5a <__floatsisf+0x6c>
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	16 c0       	rjmp	.+44     	; 0x1e5a <__floatsisf+0x6c>
    1e2e:	88 23       	and	r24, r24
    1e30:	11 f0       	breq	.+4      	; 0x1e36 <__floatsisf+0x48>
    1e32:	96 e9       	ldi	r25, 0x96	; 150
    1e34:	11 c0       	rjmp	.+34     	; 0x1e58 <__floatsisf+0x6a>
    1e36:	77 23       	and	r23, r23
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <__floatsisf+0x54>
    1e3a:	9e e8       	ldi	r25, 0x8E	; 142
    1e3c:	87 2f       	mov	r24, r23
    1e3e:	76 2f       	mov	r23, r22
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <__floatsisf+0x5e>
    1e42:	66 23       	and	r22, r22
    1e44:	71 f0       	breq	.+28     	; 0x1e62 <__floatsisf+0x74>
    1e46:	96 e8       	ldi	r25, 0x86	; 134
    1e48:	86 2f       	mov	r24, r22
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	2a f0       	brmi	.+10     	; 0x1e5a <__floatsisf+0x6c>
    1e50:	9a 95       	dec	r25
    1e52:	66 0f       	add	r22, r22
    1e54:	77 1f       	adc	r23, r23
    1e56:	88 1f       	adc	r24, r24
    1e58:	da f7       	brpl	.-10     	; 0x1e50 <__floatsisf+0x62>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	96 95       	lsr	r25
    1e5e:	87 95       	ror	r24
    1e60:	97 f9       	bld	r25, 7
    1e62:	08 95       	ret

00001e64 <__fp_inf>:
    1e64:	97 f9       	bld	r25, 7
    1e66:	9f 67       	ori	r25, 0x7F	; 127
    1e68:	80 e8       	ldi	r24, 0x80	; 128
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	08 95       	ret

00001e70 <__fp_nan>:
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	80 ec       	ldi	r24, 0xC0	; 192
    1e74:	08 95       	ret

00001e76 <__fp_pscA>:
    1e76:	00 24       	eor	r0, r0
    1e78:	0a 94       	dec	r0
    1e7a:	16 16       	cp	r1, r22
    1e7c:	17 06       	cpc	r1, r23
    1e7e:	18 06       	cpc	r1, r24
    1e80:	09 06       	cpc	r0, r25
    1e82:	08 95       	ret

00001e84 <__fp_pscB>:
    1e84:	00 24       	eor	r0, r0
    1e86:	0a 94       	dec	r0
    1e88:	12 16       	cp	r1, r18
    1e8a:	13 06       	cpc	r1, r19
    1e8c:	14 06       	cpc	r1, r20
    1e8e:	05 06       	cpc	r0, r21
    1e90:	08 95       	ret

00001e92 <__fp_round>:
    1e92:	09 2e       	mov	r0, r25
    1e94:	03 94       	inc	r0
    1e96:	00 0c       	add	r0, r0
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <__fp_round+0xc>
    1e9a:	88 23       	and	r24, r24
    1e9c:	52 f0       	brmi	.+20     	; 0x1eb2 <__fp_round+0x20>
    1e9e:	bb 0f       	add	r27, r27
    1ea0:	40 f4       	brcc	.+16     	; 0x1eb2 <__fp_round+0x20>
    1ea2:	bf 2b       	or	r27, r31
    1ea4:	11 f4       	brne	.+4      	; 0x1eaa <__fp_round+0x18>
    1ea6:	60 ff       	sbrs	r22, 0
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <__fp_round+0x20>
    1eaa:	6f 5f       	subi	r22, 0xFF	; 255
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	08 95       	ret

00001eb4 <__fp_split3>:
    1eb4:	57 fd       	sbrc	r21, 7
    1eb6:	90 58       	subi	r25, 0x80	; 128
    1eb8:	44 0f       	add	r20, r20
    1eba:	55 1f       	adc	r21, r21
    1ebc:	59 f0       	breq	.+22     	; 0x1ed4 <__fp_splitA+0x10>
    1ebe:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec0:	71 f0       	breq	.+28     	; 0x1ede <__fp_splitA+0x1a>
    1ec2:	47 95       	ror	r20

00001ec4 <__fp_splitA>:
    1ec4:	88 0f       	add	r24, r24
    1ec6:	97 fb       	bst	r25, 7
    1ec8:	99 1f       	adc	r25, r25
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <__fp_splitA+0x20>
    1ecc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ece:	79 f0       	breq	.+30     	; 0x1eee <__fp_splitA+0x2a>
    1ed0:	87 95       	ror	r24
    1ed2:	08 95       	ret
    1ed4:	12 16       	cp	r1, r18
    1ed6:	13 06       	cpc	r1, r19
    1ed8:	14 06       	cpc	r1, r20
    1eda:	55 1f       	adc	r21, r21
    1edc:	f2 cf       	rjmp	.-28     	; 0x1ec2 <__fp_split3+0xe>
    1ede:	46 95       	lsr	r20
    1ee0:	f1 df       	rcall	.-30     	; 0x1ec4 <__fp_splitA>
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <__fp_splitA+0x30>
    1ee4:	16 16       	cp	r1, r22
    1ee6:	17 06       	cpc	r1, r23
    1ee8:	18 06       	cpc	r1, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	f1 cf       	rjmp	.-30     	; 0x1ed0 <__fp_splitA+0xc>
    1eee:	86 95       	lsr	r24
    1ef0:	71 05       	cpc	r23, r1
    1ef2:	61 05       	cpc	r22, r1
    1ef4:	08 94       	sec
    1ef6:	08 95       	ret

00001ef8 <__fp_zero>:
    1ef8:	e8 94       	clt

00001efa <__fp_szero>:
    1efa:	bb 27       	eor	r27, r27
    1efc:	66 27       	eor	r22, r22
    1efe:	77 27       	eor	r23, r23
    1f00:	cb 01       	movw	r24, r22
    1f02:	97 f9       	bld	r25, 7
    1f04:	08 95       	ret

00001f06 <log10>:
    1f06:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <log>
    1f0a:	29 ed       	ldi	r18, 0xD9	; 217
    1f0c:	3b e5       	ldi	r19, 0x5B	; 91
    1f0e:	4e ed       	ldi	r20, 0xDE	; 222
    1f10:	5e e3       	ldi	r21, 0x3E	; 62
    1f12:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__mulsf3>
    1f16:	16 f0       	brts	.+4      	; 0x1f1c <log10+0x16>
    1f18:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__fp_mpack>
    1f1c:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__fp_nan>
    1f20:	68 94       	set
    1f22:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>

00001f26 <log>:
    1f26:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_splitA>
    1f2a:	a8 f3       	brcs	.-22     	; 0x1f16 <log10+0x10>
    1f2c:	99 23       	and	r25, r25
    1f2e:	c1 f3       	breq	.-16     	; 0x1f20 <log10+0x1a>
    1f30:	ae f3       	brts	.-22     	; 0x1f1c <log10+0x16>
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	1f 93       	push	r17
    1f38:	0f 93       	push	r16
    1f3a:	ff 92       	push	r15
    1f3c:	c9 2f       	mov	r28, r25
    1f3e:	dd 27       	eor	r29, r29
    1f40:	88 23       	and	r24, r24
    1f42:	2a f0       	brmi	.+10     	; 0x1f4e <log+0x28>
    1f44:	21 97       	sbiw	r28, 0x01	; 1
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	da f7       	brpl	.-10     	; 0x1f44 <log+0x1e>
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f eb       	ldi	r21, 0xBF	; 191
    1f56:	9f e3       	ldi	r25, 0x3F	; 63
    1f58:	88 39       	cpi	r24, 0x98	; 152
    1f5a:	20 f0       	brcs	.+8      	; 0x1f64 <log+0x3e>
    1f5c:	80 3e       	cpi	r24, 0xE0	; 224
    1f5e:	38 f0       	brcs	.+14     	; 0x1f6e <log+0x48>
    1f60:	21 96       	adiw	r28, 0x01	; 1
    1f62:	8f 77       	andi	r24, 0x7F	; 127
    1f64:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__addsf3>
    1f68:	e4 e5       	ldi	r30, 0x54	; 84
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <log+0x50>
    1f6e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__addsf3>
    1f72:	e1 e8       	ldi	r30, 0x81	; 129
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fp_powser>
    1f7a:	8b 01       	movw	r16, r22
    1f7c:	be 01       	movw	r22, r28
    1f7e:	ec 01       	movw	r28, r24
    1f80:	fb 2e       	mov	r15, r27
    1f82:	6f 57       	subi	r22, 0x7F	; 127
    1f84:	71 09       	sbc	r23, r1
    1f86:	75 95       	asr	r23
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 0b       	sbc	r24, r24
    1f8c:	99 0b       	sbc	r25, r25
    1f8e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__floatsisf>
    1f92:	28 e1       	ldi	r18, 0x18	; 24
    1f94:	32 e7       	ldi	r19, 0x72	; 114
    1f96:	41 e3       	ldi	r20, 0x31	; 49
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3x>
    1f9e:	af 2d       	mov	r26, r15
    1fa0:	98 01       	movw	r18, r16
    1fa2:	ae 01       	movw	r20, r28
    1fa4:	ff 90       	pop	r15
    1fa6:	0f 91       	pop	r16
    1fa8:	1f 91       	pop	r17
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__addsf3x>
    1fb2:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__fp_round>

00001fb6 <__mulsf3>:
    1fb6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3x>
    1fba:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__fp_round>
    1fbe:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fp_pscA>
    1fc2:	38 f0       	brcs	.+14     	; 0x1fd2 <__mulsf3+0x1c>
    1fc4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__fp_pscB>
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <__mulsf3+0x1c>
    1fca:	95 23       	and	r25, r21
    1fcc:	11 f0       	breq	.+4      	; 0x1fd2 <__mulsf3+0x1c>
    1fce:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>
    1fd2:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__fp_nan>
    1fd6:	11 24       	eor	r1, r1
    1fd8:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_szero>

00001fdc <__mulsf3x>:
    1fdc:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fp_split3>
    1fe0:	70 f3       	brcs	.-36     	; 0x1fbe <__mulsf3+0x8>

00001fe2 <__mulsf3_pse>:
    1fe2:	95 9f       	mul	r25, r21
    1fe4:	c1 f3       	breq	.-16     	; 0x1fd6 <__mulsf3+0x20>
    1fe6:	95 0f       	add	r25, r21
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	55 1f       	adc	r21, r21
    1fec:	62 9f       	mul	r22, r18
    1fee:	f0 01       	movw	r30, r0
    1ff0:	72 9f       	mul	r23, r18
    1ff2:	bb 27       	eor	r27, r27
    1ff4:	f0 0d       	add	r31, r0
    1ff6:	b1 1d       	adc	r27, r1
    1ff8:	63 9f       	mul	r22, r19
    1ffa:	aa 27       	eor	r26, r26
    1ffc:	f0 0d       	add	r31, r0
    1ffe:	b1 1d       	adc	r27, r1
    2000:	aa 1f       	adc	r26, r26
    2002:	64 9f       	mul	r22, r20
    2004:	66 27       	eor	r22, r22
    2006:	b0 0d       	add	r27, r0
    2008:	a1 1d       	adc	r26, r1
    200a:	66 1f       	adc	r22, r22
    200c:	82 9f       	mul	r24, r18
    200e:	22 27       	eor	r18, r18
    2010:	b0 0d       	add	r27, r0
    2012:	a1 1d       	adc	r26, r1
    2014:	62 1f       	adc	r22, r18
    2016:	73 9f       	mul	r23, r19
    2018:	b0 0d       	add	r27, r0
    201a:	a1 1d       	adc	r26, r1
    201c:	62 1f       	adc	r22, r18
    201e:	83 9f       	mul	r24, r19
    2020:	a0 0d       	add	r26, r0
    2022:	61 1d       	adc	r22, r1
    2024:	22 1f       	adc	r18, r18
    2026:	74 9f       	mul	r23, r20
    2028:	33 27       	eor	r19, r19
    202a:	a0 0d       	add	r26, r0
    202c:	61 1d       	adc	r22, r1
    202e:	23 1f       	adc	r18, r19
    2030:	84 9f       	mul	r24, r20
    2032:	60 0d       	add	r22, r0
    2034:	21 1d       	adc	r18, r1
    2036:	82 2f       	mov	r24, r18
    2038:	76 2f       	mov	r23, r22
    203a:	6a 2f       	mov	r22, r26
    203c:	11 24       	eor	r1, r1
    203e:	9f 57       	subi	r25, 0x7F	; 127
    2040:	50 40       	sbci	r21, 0x00	; 0
    2042:	9a f0       	brmi	.+38     	; 0x206a <__mulsf3_pse+0x88>
    2044:	f1 f0       	breq	.+60     	; 0x2082 <__mulsf3_pse+0xa0>
    2046:	88 23       	and	r24, r24
    2048:	4a f0       	brmi	.+18     	; 0x205c <__mulsf3_pse+0x7a>
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	bb 1f       	adc	r27, r27
    2050:	66 1f       	adc	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	91 50       	subi	r25, 0x01	; 1
    2058:	50 40       	sbci	r21, 0x00	; 0
    205a:	a9 f7       	brne	.-22     	; 0x2046 <__mulsf3_pse+0x64>
    205c:	9e 3f       	cpi	r25, 0xFE	; 254
    205e:	51 05       	cpc	r21, r1
    2060:	80 f0       	brcs	.+32     	; 0x2082 <__mulsf3_pse+0xa0>
    2062:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>
    2066:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_szero>
    206a:	5f 3f       	cpi	r21, 0xFF	; 255
    206c:	e4 f3       	brlt	.-8      	; 0x2066 <__mulsf3_pse+0x84>
    206e:	98 3e       	cpi	r25, 0xE8	; 232
    2070:	d4 f3       	brlt	.-12     	; 0x2066 <__mulsf3_pse+0x84>
    2072:	86 95       	lsr	r24
    2074:	77 95       	ror	r23
    2076:	67 95       	ror	r22
    2078:	b7 95       	ror	r27
    207a:	f7 95       	ror	r31
    207c:	e7 95       	ror	r30
    207e:	9f 5f       	subi	r25, 0xFF	; 255
    2080:	c1 f7       	brne	.-16     	; 0x2072 <__mulsf3_pse+0x90>
    2082:	fe 2b       	or	r31, r30
    2084:	88 0f       	add	r24, r24
    2086:	91 1d       	adc	r25, r1
    2088:	96 95       	lsr	r25
    208a:	87 95       	ror	r24
    208c:	97 f9       	bld	r25, 7
    208e:	08 95       	ret

00002090 <pow>:
    2090:	fa 01       	movw	r30, r20
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	30 96       	adiw	r30, 0x00	; 0
    2098:	21 05       	cpc	r18, r1
    209a:	31 05       	cpc	r19, r1
    209c:	a1 f1       	breq	.+104    	; 0x2106 <pow+0x76>
    209e:	61 15       	cp	r22, r1
    20a0:	71 05       	cpc	r23, r1
    20a2:	61 f4       	brne	.+24     	; 0x20bc <pow+0x2c>
    20a4:	80 38       	cpi	r24, 0x80	; 128
    20a6:	bf e3       	ldi	r27, 0x3F	; 63
    20a8:	9b 07       	cpc	r25, r27
    20aa:	49 f1       	breq	.+82     	; 0x20fe <pow+0x6e>
    20ac:	68 94       	set
    20ae:	90 38       	cpi	r25, 0x80	; 128
    20b0:	81 05       	cpc	r24, r1
    20b2:	61 f0       	breq	.+24     	; 0x20cc <pow+0x3c>
    20b4:	80 38       	cpi	r24, 0x80	; 128
    20b6:	bf ef       	ldi	r27, 0xFF	; 255
    20b8:	9b 07       	cpc	r25, r27
    20ba:	41 f0       	breq	.+16     	; 0x20cc <pow+0x3c>
    20bc:	99 23       	and	r25, r25
    20be:	4a f5       	brpl	.+82     	; 0x2112 <pow+0x82>
    20c0:	ff 3f       	cpi	r31, 0xFF	; 255
    20c2:	e1 05       	cpc	r30, r1
    20c4:	31 05       	cpc	r19, r1
    20c6:	21 05       	cpc	r18, r1
    20c8:	19 f1       	breq	.+70     	; 0x2110 <pow+0x80>
    20ca:	e8 94       	clt
    20cc:	08 94       	sec
    20ce:	e7 95       	ror	r30
    20d0:	d9 01       	movw	r26, r18
    20d2:	aa 23       	and	r26, r26
    20d4:	29 f4       	brne	.+10     	; 0x20e0 <pow+0x50>
    20d6:	ab 2f       	mov	r26, r27
    20d8:	be 2f       	mov	r27, r30
    20da:	f8 5f       	subi	r31, 0xF8	; 248
    20dc:	d0 f3       	brcs	.-12     	; 0x20d2 <pow+0x42>
    20de:	10 c0       	rjmp	.+32     	; 0x2100 <pow+0x70>
    20e0:	ff 5f       	subi	r31, 0xFF	; 255
    20e2:	70 f4       	brcc	.+28     	; 0x2100 <pow+0x70>
    20e4:	a6 95       	lsr	r26
    20e6:	e0 f7       	brcc	.-8      	; 0x20e0 <pow+0x50>
    20e8:	f7 39       	cpi	r31, 0x97	; 151
    20ea:	50 f0       	brcs	.+20     	; 0x2100 <pow+0x70>
    20ec:	19 f0       	breq	.+6      	; 0x20f4 <pow+0x64>
    20ee:	ff 3a       	cpi	r31, 0xAF	; 175
    20f0:	38 f4       	brcc	.+14     	; 0x2100 <pow+0x70>
    20f2:	9f 77       	andi	r25, 0x7F	; 127
    20f4:	9f 93       	push	r25
    20f6:	0d d0       	rcall	.+26     	; 0x2112 <pow+0x82>
    20f8:	0f 90       	pop	r0
    20fa:	07 fc       	sbrc	r0, 7
    20fc:	90 58       	subi	r25, 0x80	; 128
    20fe:	08 95       	ret
    2100:	46 f0       	brts	.+16     	; 0x2112 <pow+0x82>
    2102:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__fp_nan>
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	9f e3       	ldi	r25, 0x3F	; 63
    210e:	08 95       	ret
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	9f 77       	andi	r25, 0x7F	; 127
    2114:	5f 93       	push	r21
    2116:	4f 93       	push	r20
    2118:	3f 93       	push	r19
    211a:	2f 93       	push	r18
    211c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <log>
    2120:	2f 91       	pop	r18
    2122:	3f 91       	pop	r19
    2124:	4f 91       	pop	r20
    2126:	5f 91       	pop	r21
    2128:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulsf3>
    212c:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <exp>
    2130:	29 f4       	brne	.+10     	; 0x213c <pow+0xac>
    2132:	16 f0       	brts	.+4      	; 0x2138 <pow+0xa8>
    2134:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>
    2138:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__fp_zero>
    213c:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__fp_nan>

00002140 <exp>:
    2140:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_splitA>
    2144:	a8 f3       	brcs	.-22     	; 0x2130 <pow+0xa0>
    2146:	96 38       	cpi	r25, 0x86	; 134
    2148:	a0 f7       	brcc	.-24     	; 0x2132 <pow+0xa2>
    214a:	07 f8       	bld	r0, 7
    214c:	0f 92       	push	r0
    214e:	e8 94       	clt
    2150:	2b e3       	ldi	r18, 0x3B	; 59
    2152:	3a ea       	ldi	r19, 0xAA	; 170
    2154:	48 eb       	ldi	r20, 0xB8	; 184
    2156:	5f e7       	ldi	r21, 0x7F	; 127
    2158:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__mulsf3_pse>
    215c:	0f 92       	push	r0
    215e:	0f 92       	push	r0
    2160:	0f 92       	push	r0
    2162:	4d b7       	in	r20, 0x3d	; 61
    2164:	5e b7       	in	r21, 0x3e	; 62
    2166:	0f 92       	push	r0
    2168:	0e 94 49 11 	call	0x2292	; 0x2292 <modf>
    216c:	ee ea       	ldi	r30, 0xAE	; 174
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fp_powser>
    2174:	4f 91       	pop	r20
    2176:	5f 91       	pop	r21
    2178:	ef 91       	pop	r30
    217a:	ff 91       	pop	r31
    217c:	e5 95       	asr	r30
    217e:	ee 1f       	adc	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	49 f0       	breq	.+18     	; 0x2196 <exp+0x56>
    2184:	fe 57       	subi	r31, 0x7E	; 126
    2186:	e0 68       	ori	r30, 0x80	; 128
    2188:	44 27       	eor	r20, r20
    218a:	ee 0f       	add	r30, r30
    218c:	44 1f       	adc	r20, r20
    218e:	fa 95       	dec	r31
    2190:	e1 f7       	brne	.-8      	; 0x218a <exp+0x4a>
    2192:	41 95       	neg	r20
    2194:	55 0b       	sbc	r21, r21
    2196:	0e 94 13 11 	call	0x2226	; 0x2226 <ldexp>
    219a:	0f 90       	pop	r0
    219c:	07 fe       	sbrs	r0, 7
    219e:	0c 94 07 11 	jmp	0x220e	; 0x220e <inverse>
    21a2:	08 95       	ret

000021a4 <__fp_mpack>:
    21a4:	9f 3f       	cpi	r25, 0xFF	; 255
    21a6:	31 f0       	breq	.+12     	; 0x21b4 <__fp_mpack_finite+0xc>

000021a8 <__fp_mpack_finite>:
    21a8:	91 50       	subi	r25, 0x01	; 1
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <__fp_mpack_finite+0xc>
    21ac:	87 95       	ror	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	b7 95       	ror	r27
    21b4:	88 0f       	add	r24, r24
    21b6:	91 1d       	adc	r25, r1
    21b8:	96 95       	lsr	r25
    21ba:	87 95       	ror	r24
    21bc:	97 f9       	bld	r25, 7
    21be:	08 95       	ret

000021c0 <__fp_powser>:
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	1f 93       	push	r17
    21c6:	0f 93       	push	r16
    21c8:	ff 92       	push	r15
    21ca:	ef 92       	push	r14
    21cc:	df 92       	push	r13
    21ce:	7b 01       	movw	r14, r22
    21d0:	8c 01       	movw	r16, r24
    21d2:	68 94       	set
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <__fp_powser+0x22>
    21d6:	da 2e       	mov	r13, r26
    21d8:	ef 01       	movw	r28, r30
    21da:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3x>
    21de:	fe 01       	movw	r30, r28
    21e0:	e8 94       	clt
    21e2:	a5 91       	lpm	r26, Z+
    21e4:	25 91       	lpm	r18, Z+
    21e6:	35 91       	lpm	r19, Z+
    21e8:	45 91       	lpm	r20, Z+
    21ea:	55 91       	lpm	r21, Z+
    21ec:	a6 f3       	brts	.-24     	; 0x21d6 <__fp_powser+0x16>
    21ee:	ef 01       	movw	r28, r30
    21f0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__addsf3x>
    21f4:	fe 01       	movw	r30, r28
    21f6:	97 01       	movw	r18, r14
    21f8:	a8 01       	movw	r20, r16
    21fa:	da 94       	dec	r13
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <__fp_powser+0x18>
    21fe:	df 90       	pop	r13
    2200:	ef 90       	pop	r14
    2202:	ff 90       	pop	r15
    2204:	0f 91       	pop	r16
    2206:	1f 91       	pop	r17
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <inverse>:
    220e:	9b 01       	movw	r18, r22
    2210:	ac 01       	movw	r20, r24
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	80 e8       	ldi	r24, 0x80	; 128
    2218:	9f e3       	ldi	r25, 0x3F	; 63
    221a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__divsf3>
    221e:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_inf>
    2222:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__fp_mpack>

00002226 <ldexp>:
    2226:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fp_splitA>
    222a:	d8 f3       	brcs	.-10     	; 0x2222 <inverse+0x14>
    222c:	99 23       	and	r25, r25
    222e:	c9 f3       	breq	.-14     	; 0x2222 <inverse+0x14>
    2230:	94 0f       	add	r25, r20
    2232:	51 1d       	adc	r21, r1
    2234:	a3 f3       	brvs	.-24     	; 0x221e <inverse+0x10>
    2236:	91 50       	subi	r25, 0x01	; 1
    2238:	50 40       	sbci	r21, 0x00	; 0
    223a:	94 f0       	brlt	.+36     	; 0x2260 <ldexp+0x3a>
    223c:	59 f0       	breq	.+22     	; 0x2254 <ldexp+0x2e>
    223e:	88 23       	and	r24, r24
    2240:	32 f0       	brmi	.+12     	; 0x224e <ldexp+0x28>
    2242:	66 0f       	add	r22, r22
    2244:	77 1f       	adc	r23, r23
    2246:	88 1f       	adc	r24, r24
    2248:	91 50       	subi	r25, 0x01	; 1
    224a:	50 40       	sbci	r21, 0x00	; 0
    224c:	c1 f7       	brne	.-16     	; 0x223e <ldexp+0x18>
    224e:	9e 3f       	cpi	r25, 0xFE	; 254
    2250:	51 05       	cpc	r21, r1
    2252:	2c f7       	brge	.-54     	; 0x221e <inverse+0x10>
    2254:	88 0f       	add	r24, r24
    2256:	91 1d       	adc	r25, r1
    2258:	96 95       	lsr	r25
    225a:	87 95       	ror	r24
    225c:	97 f9       	bld	r25, 7
    225e:	08 95       	ret
    2260:	5f 3f       	cpi	r21, 0xFF	; 255
    2262:	ac f0       	brlt	.+42     	; 0x228e <ldexp+0x68>
    2264:	98 3e       	cpi	r25, 0xE8	; 232
    2266:	9c f0       	brlt	.+38     	; 0x228e <ldexp+0x68>
    2268:	bb 27       	eor	r27, r27
    226a:	86 95       	lsr	r24
    226c:	77 95       	ror	r23
    226e:	67 95       	ror	r22
    2270:	b7 95       	ror	r27
    2272:	08 f4       	brcc	.+2      	; 0x2276 <ldexp+0x50>
    2274:	b1 60       	ori	r27, 0x01	; 1
    2276:	93 95       	inc	r25
    2278:	c1 f7       	brne	.-16     	; 0x226a <ldexp+0x44>
    227a:	bb 0f       	add	r27, r27
    227c:	58 f7       	brcc	.-42     	; 0x2254 <ldexp+0x2e>
    227e:	11 f4       	brne	.+4      	; 0x2284 <ldexp+0x5e>
    2280:	60 ff       	sbrs	r22, 0
    2282:	e8 cf       	rjmp	.-48     	; 0x2254 <ldexp+0x2e>
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	8f 4f       	sbci	r24, 0xFF	; 255
    228a:	9f 4f       	sbci	r25, 0xFF	; 255
    228c:	e3 cf       	rjmp	.-58     	; 0x2254 <ldexp+0x2e>
    228e:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_szero>

00002292 <modf>:
    2292:	fa 01       	movw	r30, r20
    2294:	dc 01       	movw	r26, r24
    2296:	aa 0f       	add	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	9b 01       	movw	r18, r22
    229c:	ac 01       	movw	r20, r24
    229e:	bf 57       	subi	r27, 0x7F	; 127
    22a0:	28 f4       	brcc	.+10     	; 0x22ac <modf+0x1a>
    22a2:	22 27       	eor	r18, r18
    22a4:	33 27       	eor	r19, r19
    22a6:	44 27       	eor	r20, r20
    22a8:	50 78       	andi	r21, 0x80	; 128
    22aa:	20 c0       	rjmp	.+64     	; 0x22ec <modf+0x5a>
    22ac:	b7 51       	subi	r27, 0x17	; 23
    22ae:	90 f4       	brcc	.+36     	; 0x22d4 <modf+0x42>
    22b0:	ab 2f       	mov	r26, r27
    22b2:	00 24       	eor	r0, r0
    22b4:	46 95       	lsr	r20
    22b6:	37 95       	ror	r19
    22b8:	27 95       	ror	r18
    22ba:	01 1c       	adc	r0, r1
    22bc:	a3 95       	inc	r26
    22be:	d2 f3       	brmi	.-12     	; 0x22b4 <modf+0x22>
    22c0:	00 20       	and	r0, r0
    22c2:	71 f0       	breq	.+28     	; 0x22e0 <modf+0x4e>
    22c4:	22 0f       	add	r18, r18
    22c6:	33 1f       	adc	r19, r19
    22c8:	44 1f       	adc	r20, r20
    22ca:	b3 95       	inc	r27
    22cc:	da f3       	brmi	.-10     	; 0x22c4 <modf+0x32>
    22ce:	0e d0       	rcall	.+28     	; 0x22ec <modf+0x5a>
    22d0:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__subsf3>
    22d4:	61 30       	cpi	r22, 0x01	; 1
    22d6:	71 05       	cpc	r23, r1
    22d8:	a0 e8       	ldi	r26, 0x80	; 128
    22da:	8a 07       	cpc	r24, r26
    22dc:	b9 46       	sbci	r27, 0x69	; 105
    22de:	30 f4       	brcc	.+12     	; 0x22ec <modf+0x5a>
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	66 27       	eor	r22, r22
    22e6:	77 27       	eor	r23, r23
    22e8:	88 27       	eor	r24, r24
    22ea:	90 78       	andi	r25, 0x80	; 128
    22ec:	30 96       	adiw	r30, 0x00	; 0
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <modf+0x66>
    22f0:	20 83       	st	Z, r18
    22f2:	31 83       	std	Z+1, r19	; 0x01
    22f4:	42 83       	std	Z+2, r20	; 0x02
    22f6:	53 83       	std	Z+3, r21	; 0x03
    22f8:	08 95       	ret

000022fa <__udivmodsi4>:
    22fa:	a1 e2       	ldi	r26, 0x21	; 33
    22fc:	1a 2e       	mov	r1, r26
    22fe:	aa 1b       	sub	r26, r26
    2300:	bb 1b       	sub	r27, r27
    2302:	fd 01       	movw	r30, r26
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <__udivmodsi4_ep>

00002306 <__udivmodsi4_loop>:
    2306:	aa 1f       	adc	r26, r26
    2308:	bb 1f       	adc	r27, r27
    230a:	ee 1f       	adc	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	a2 17       	cp	r26, r18
    2310:	b3 07       	cpc	r27, r19
    2312:	e4 07       	cpc	r30, r20
    2314:	f5 07       	cpc	r31, r21
    2316:	20 f0       	brcs	.+8      	; 0x2320 <__udivmodsi4_ep>
    2318:	a2 1b       	sub	r26, r18
    231a:	b3 0b       	sbc	r27, r19
    231c:	e4 0b       	sbc	r30, r20
    231e:	f5 0b       	sbc	r31, r21

00002320 <__udivmodsi4_ep>:
    2320:	66 1f       	adc	r22, r22
    2322:	77 1f       	adc	r23, r23
    2324:	88 1f       	adc	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	1a 94       	dec	r1
    232a:	69 f7       	brne	.-38     	; 0x2306 <__udivmodsi4_loop>
    232c:	60 95       	com	r22
    232e:	70 95       	com	r23
    2330:	80 95       	com	r24
    2332:	90 95       	com	r25
    2334:	9b 01       	movw	r18, r22
    2336:	ac 01       	movw	r20, r24
    2338:	bd 01       	movw	r22, r26
    233a:	cf 01       	movw	r24, r30
    233c:	08 95       	ret

0000233e <__umulhisi3>:
    233e:	a2 9f       	mul	r26, r18
    2340:	b0 01       	movw	r22, r0
    2342:	b3 9f       	mul	r27, r19
    2344:	c0 01       	movw	r24, r0
    2346:	a3 9f       	mul	r26, r19
    2348:	70 0d       	add	r23, r0
    234a:	81 1d       	adc	r24, r1
    234c:	11 24       	eor	r1, r1
    234e:	91 1d       	adc	r25, r1
    2350:	b2 9f       	mul	r27, r18
    2352:	70 0d       	add	r23, r0
    2354:	81 1d       	adc	r24, r1
    2356:	11 24       	eor	r1, r1
    2358:	91 1d       	adc	r25, r1
    235a:	08 95       	ret

0000235c <__muluhisi3>:
    235c:	0e 94 9f 11 	call	0x233e	; 0x233e <__umulhisi3>
    2360:	a5 9f       	mul	r26, r21
    2362:	90 0d       	add	r25, r0
    2364:	b4 9f       	mul	r27, r20
    2366:	90 0d       	add	r25, r0
    2368:	a4 9f       	mul	r26, r20
    236a:	80 0d       	add	r24, r0
    236c:	91 1d       	adc	r25, r1
    236e:	11 24       	eor	r1, r1
    2370:	08 95       	ret

00002372 <strcmp>:
    2372:	fb 01       	movw	r30, r22
    2374:	dc 01       	movw	r26, r24
    2376:	8d 91       	ld	r24, X+
    2378:	01 90       	ld	r0, Z+
    237a:	80 19       	sub	r24, r0
    237c:	01 10       	cpse	r0, r1
    237e:	d9 f3       	breq	.-10     	; 0x2376 <strcmp+0x4>
    2380:	99 0b       	sbc	r25, r25
    2382:	08 95       	ret

00002384 <_exit>:
    2384:	f8 94       	cli

00002386 <__stop_program>:
    2386:	ff cf       	rjmp	.-2      	; 0x2386 <__stop_program>
